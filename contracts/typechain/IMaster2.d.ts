/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IMaster2Interface extends ethers.utils.Interface {
  functions: {};

  events: {
    "burn(address,address,address,uint256,uint256)": EventFragment;
    "freezeTkn(address,uint256,address,address,uint256)": EventFragment;
    "frzUnfrzUser(address,bool,address,address,uint256)": EventFragment;
    "reject(address,uint256,address,address,uint256)": EventFragment;
    "tokenMint(address,uint256,address,address,uint256)": EventFragment;
    "unFreezeTkn(address,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "freezeTkn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "frzUnfrzUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "reject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tokenMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "unFreezeTkn"): EventFragment;
}

export class IMaster2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMaster2Interface;

  functions: {};

  callStatic: {};

  filters: {
    burn(
      user: null,
      agent: null,
      token: null,
      amount: null,
      projectId: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        user: string;
        agent: string;
        token: string;
        amount: BigNumber;
        projectId: BigNumber;
      }
    >;

    freezeTkn(
      user: null,
      amount: null,
      token: null,
      agent: null,
      projectId: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        amount: BigNumber;
        token: string;
        agent: string;
        projectId: BigNumber;
      }
    >;

    frzUnfrzUser(
      user: null,
      freeze: null,
      token: null,
      agent: null,
      projectId: null
    ): TypedEventFilter<
      [string, boolean, string, string, BigNumber],
      {
        user: string;
        freeze: boolean;
        token: string;
        agent: string;
        projectId: BigNumber;
      }
    >;

    reject(
      user: null,
      amount: null,
      token: null,
      agent: null,
      buyCounter: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        amount: BigNumber;
        token: string;
        agent: string;
        buyCounter: BigNumber;
      }
    >;

    tokenMint(
      user: null,
      mintAmount: null,
      token: null,
      agent: null,
      buyCounter: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        mintAmount: BigNumber;
        token: string;
        agent: string;
        buyCounter: BigNumber;
      }
    >;

    unFreezeTkn(
      user: null,
      amount: null,
      token: null,
      agent: null,
      projectId: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        amount: BigNumber;
        token: string;
        agent: string;
        projectId: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
