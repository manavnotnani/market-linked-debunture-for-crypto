/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IMasterInterface extends ethers.utils.Interface {
  functions: {
    "TTL()": FunctionFragment;
    "USDC()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "lengthLimit()": FunctionFragment;
    "managemntFee()": FunctionFragment;
    "mintAccess(address,uint256)": FunctionFragment;
    "propertyData1(uint256)": FunctionFragment;
    "propertyData2(uint256)": FunctionFragment;
    "rejectBuyUpdate(address,uint256,uint256,uint256)": FunctionFragment;
    "setTrexFact(address)": FunctionFragment;
    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "userBalnc(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TTL", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lengthLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managemntFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAccess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyData1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyData2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectBuyUpdate",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTrexFact", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateMintModule",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalnc",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "TTL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lengthLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managemntFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertyData1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertyData2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectBuyUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrexFact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBalnc", data: BytesLike): Result;

  events: {
    "buy(address,uint256,address,address,uint256,uint256,uint256,uint256,uint256,string,uint256)": EventFragment;
    "deployed(tuple,tuple,uint256)": EventFragment;
    "diviendClaim(address,uint256,uint256,address)": EventFragment;
    "diviendDeposit(uint256,uint256)": EventFragment;
    "identities(address,address,uint256,address,address,string,string)": EventFragment;
    "reject(address,uint256,address,address,uint256)": EventFragment;
    "tokenMint(address,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "diviendClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "diviendDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "identities"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "reject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tokenMint"): EventFragment;
}

export class IMaster extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMasterInterface;

  functions: {
    TTL(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "TTL()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    USDC(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "USDC()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getOwner()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lengthLimit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lengthLimit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managemntFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "managemntFee()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAccess(
      user: string,
      projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintAccess(address,uint256)"(
      user: string,
      projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    propertyData1(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string, string, string, string] & {
          token: string;
          ir: string;
          irs: string;
          tir: string;
          ctr: string;
          mc: string;
          prjctOwner: string;
          dividend: string;
        }
      ]
    >;

    "propertyData1(uint256)"(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string, string, string, string] & {
          token: string;
          ir: string;
          irs: string;
          tir: string;
          ctr: string;
          mc: string;
          prjctOwner: string;
          dividend: string;
        }
      ]
    >;

    propertyData2(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number[],
          string[],
          string
        ] & {
          minimumBuy: BigNumber;
          managementFee: BigNumber;
          price: BigNumber;
          totalSupply: BigNumber;
          bought: BigNumber;
          locked: BigNumber;
          country: BigNumber;
          maxhold: BigNumber;
          restrictCountries: number[];
          agent: string[];
          propertyId: string;
        }
      ]
    >;

    "propertyData2(uint256)"(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number[],
          string[],
          string
        ] & {
          minimumBuy: BigNumber;
          managementFee: BigNumber;
          price: BigNumber;
          totalSupply: BigNumber;
          bought: BigNumber;
          locked: BigNumber;
          country: BigNumber;
          maxhold: BigNumber;
          restrictCountries: number[];
          agent: string[];
          propertyId: string;
        }
      ]
    >;

    rejectBuyUpdate(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rejectBuyUpdate(address,uint256,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrexFact(
      fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTrexFact(address)"(
      fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMintModule(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBalnc(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "userBalnc(address,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TTL(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "TTL()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  USDC(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "USDC()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getOwner()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lengthLimit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lengthLimit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managemntFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "managemntFee()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAccess(
    user: string,
    projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintAccess(address,uint256)"(
    user: string,
    projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  propertyData1(
    projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string] & {
      token: string;
      ir: string;
      irs: string;
      tir: string;
      ctr: string;
      mc: string;
      prjctOwner: string;
      dividend: string;
    }
  >;

  "propertyData1(uint256)"(
    projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string] & {
      token: string;
      ir: string;
      irs: string;
      tir: string;
      ctr: string;
      mc: string;
      prjctOwner: string;
      dividend: string;
    }
  >;

  propertyData2(
    projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number[],
      string[],
      string
    ] & {
      minimumBuy: BigNumber;
      managementFee: BigNumber;
      price: BigNumber;
      totalSupply: BigNumber;
      bought: BigNumber;
      locked: BigNumber;
      country: BigNumber;
      maxhold: BigNumber;
      restrictCountries: number[];
      agent: string[];
      propertyId: string;
    }
  >;

  "propertyData2(uint256)"(
    projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number[],
      string[],
      string
    ] & {
      minimumBuy: BigNumber;
      managementFee: BigNumber;
      price: BigNumber;
      totalSupply: BigNumber;
      bought: BigNumber;
      locked: BigNumber;
      country: BigNumber;
      maxhold: BigNumber;
      restrictCountries: number[];
      agent: string[];
      propertyId: string;
    }
  >;

  rejectBuyUpdate(
    user: string,
    projectId: BigNumberish,
    buyId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rejectBuyUpdate(address,uint256,uint256,uint256)"(
    user: string,
    projectId: BigNumberish,
    buyId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrexFact(
    fact: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTrexFact(address)"(
    fact: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMintModule(
    _user: string,
    _tokenAmount: BigNumberish,
    _projectId: BigNumberish,
    _buyId: BigNumberish,
    _AdminfeeAmount: BigNumberish,
    _issuerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
    _user: string,
    _tokenAmount: BigNumberish,
    _projectId: BigNumberish,
    _buyId: BigNumberish,
    _AdminfeeAmount: BigNumberish,
    _issuerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBalnc(
    user: string,
    projectId: BigNumberish,
    buyID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "userBalnc(address,uint256,uint256)"(
    user: string,
    projectId: BigNumberish,
    buyID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TTL(overrides?: CallOverrides): Promise<string>;

    "TTL()"(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    "USDC()"(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    lengthLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "lengthLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    managemntFee(overrides?: CallOverrides): Promise<BigNumber>;

    "managemntFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintAccess(
      user: string,
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mintAccess(address,uint256)"(
      user: string,
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    propertyData1(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        token: string;
        ir: string;
        irs: string;
        tir: string;
        ctr: string;
        mc: string;
        prjctOwner: string;
        dividend: string;
      }
    >;

    "propertyData1(uint256)"(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        token: string;
        ir: string;
        irs: string;
        tir: string;
        ctr: string;
        mc: string;
        prjctOwner: string;
        dividend: string;
      }
    >;

    propertyData2(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number[],
        string[],
        string
      ] & {
        minimumBuy: BigNumber;
        managementFee: BigNumber;
        price: BigNumber;
        totalSupply: BigNumber;
        bought: BigNumber;
        locked: BigNumber;
        country: BigNumber;
        maxhold: BigNumber;
        restrictCountries: number[];
        agent: string[];
        propertyId: string;
      }
    >;

    "propertyData2(uint256)"(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number[],
        string[],
        string
      ] & {
        minimumBuy: BigNumber;
        managementFee: BigNumber;
        price: BigNumber;
        totalSupply: BigNumber;
        bought: BigNumber;
        locked: BigNumber;
        country: BigNumber;
        maxhold: BigNumber;
        restrictCountries: number[];
        agent: string[];
        propertyId: string;
      }
    >;

    rejectBuyUpdate(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rejectBuyUpdate(address,uint256,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrexFact(fact: string, overrides?: CallOverrides): Promise<void>;

    "setTrexFact(address)"(
      fact: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMintModule(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userBalnc(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        usdc: BigNumber;
        token: BigNumber;
        minted: boolean;
      }
    >;

    "userBalnc(address,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        usdc: BigNumber;
        token: BigNumber;
        minted: boolean;
      }
    >;
  };

  filters: {
    buy(
      user: null,
      usdcAmount: null,
      token: null,
      agent: null,
      projectId: null,
      buyCounter: null,
      receiveAmount: null,
      fee: null,
      price: null,
      buyType: null,
      country: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        user: string;
        usdcAmount: BigNumber;
        token: string;
        agent: string;
        projectId: BigNumber;
        buyCounter: BigNumber;
        receiveAmount: BigNumber;
        fee: BigNumber;
        price: BigNumber;
        buyType: string;
        country: BigNumber;
      }
    >;

    deployed(
      propertyData1: null,
      propertyData2: null,
      projectId: null
    ): TypedEventFilter<
      [
        [string, string, string, string, string, string, string, string] & {
          token: string;
          ir: string;
          irs: string;
          tir: string;
          ctr: string;
          mc: string;
          prjctOwner: string;
          dividend: string;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number[],
          string[],
          string
        ] & {
          minimumBuy: BigNumber;
          managementFee: BigNumber;
          price: BigNumber;
          totalSupply: BigNumber;
          bought: BigNumber;
          locked: BigNumber;
          country: BigNumber;
          maxhold: BigNumber;
          restrictCountries: number[];
          agent: string[];
          propertyId: string;
        },
        BigNumber
      ],
      {
        propertyData1: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ] & {
          token: string;
          ir: string;
          irs: string;
          tir: string;
          ctr: string;
          mc: string;
          prjctOwner: string;
          dividend: string;
        };
        propertyData2: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number[],
          string[],
          string
        ] & {
          minimumBuy: BigNumber;
          managementFee: BigNumber;
          price: BigNumber;
          totalSupply: BigNumber;
          bought: BigNumber;
          locked: BigNumber;
          country: BigNumber;
          maxhold: BigNumber;
          restrictCountries: number[];
          agent: string[];
          propertyId: string;
        };
        projectId: BigNumber;
      }
    >;

    diviendClaim(
      user: null,
      amount: null,
      ProjectId: null,
      token: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { user: string; amount: BigNumber; ProjectId: BigNumber; token: string }
    >;

    diviendDeposit(
      amount: null,
      ProjectId: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; ProjectId: BigNumber }
    >;

    identities(
      identity: null,
      user: null,
      projectId: null,
      agent: null,
      token: null,
      subscriberId: null,
      uid: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, string, string],
      {
        identity: string;
        user: string;
        projectId: BigNumber;
        agent: string;
        token: string;
        subscriberId: string;
        uid: string;
      }
    >;

    reject(
      user: null,
      amount: null,
      token: null,
      agent: null,
      buyCounter: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        amount: BigNumber;
        token: string;
        agent: string;
        buyCounter: BigNumber;
      }
    >;

    tokenMint(
      user: null,
      mintAmount: null,
      token: null,
      agent: null,
      buyCounter: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        mintAmount: BigNumber;
        token: string;
        agent: string;
        buyCounter: BigNumber;
      }
    >;
  };

  estimateGas: {
    TTL(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "TTL()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    USDC(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "USDC()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getOwner()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lengthLimit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lengthLimit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managemntFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "managemntFee()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAccess(
      user: string,
      projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintAccess(address,uint256)"(
      user: string,
      projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    propertyData1(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propertyData1(uint256)"(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propertyData2(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propertyData2(uint256)"(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectBuyUpdate(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rejectBuyUpdate(address,uint256,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrexFact(
      fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTrexFact(address)"(
      fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMintModule(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBalnc(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "userBalnc(address,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TTL(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "TTL()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    USDC(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "USDC()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getOwner()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lengthLimit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lengthLimit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managemntFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "managemntFee()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAccess(
      user: string,
      projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintAccess(address,uint256)"(
      user: string,
      projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    propertyData1(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "propertyData1(uint256)"(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propertyData2(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "propertyData2(uint256)"(
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectBuyUpdate(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rejectBuyUpdate(address,uint256,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrexFact(
      fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTrexFact(address)"(
      fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMintModule(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBalnc(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "userBalnc(address,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
