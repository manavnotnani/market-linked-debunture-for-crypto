/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DividendInterface extends ethers.utils.Interface {
  functions: {
    "boundToken()": FunctionFragment;
    "calculateTokenewards(address)": FunctionFragment;
    "claimDividendRewards(address)": FunctionFragment;
    "depositDividendRewards(uint256,uint256)": FunctionFragment;
    "init(address,address,address)": FunctionFragment;
    "master()": FunctionFragment;
    "owner()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "rewardsPerShare()": FunctionFragment;
    "setPreviouseRewards(address)": FunctionFragment;
    "totalBuy()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userData(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "boundToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDividendRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDividendRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPreviouseRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "totalBuy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userData", values: [string]): string;

  decodeFunctionResult(functionFragment: "boundToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDividendRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositDividendRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreviouseRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userData", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Dividend extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DividendInterface;

  functions: {
    boundToken(overrides?: CallOverrides): Promise<[string]>;

    "boundToken()"(overrides?: CallOverrides): Promise<[string]>;

    calculateTokenewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateTokenewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimDividendRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimDividendRewards(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositDividendRewards(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositDividendRewards(uint256,uint256)"(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _rewardToken: string,
      _master: string,
      _boundToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(address,address,address)"(
      _rewardToken: string,
      _master: string,
      _boundToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    master(overrides?: CallOverrides): Promise<[string]>;

    "master()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    rewardsPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsPerShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setPreviouseRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPreviouseRewards(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBuy(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBuy()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { previousRewards: BigNumber; sNot: BigNumber }
    >;

    "userData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { previousRewards: BigNumber; sNot: BigNumber }
    >;
  };

  boundToken(overrides?: CallOverrides): Promise<string>;

  "boundToken()"(overrides?: CallOverrides): Promise<string>;

  calculateTokenewards(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateTokenewards(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimDividendRewards(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimDividendRewards(address)"(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositDividendRewards(
    _amount: BigNumberish,
    _prjctId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositDividendRewards(uint256,uint256)"(
    _amount: BigNumberish,
    _prjctId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _rewardToken: string,
    _master: string,
    _boundToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(address,address,address)"(
    _rewardToken: string,
    _master: string,
    _boundToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  master(overrides?: CallOverrides): Promise<string>;

  "master()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  rewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  setPreviouseRewards(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPreviouseRewards(address)"(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBuy(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBuy()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { previousRewards: BigNumber; sNot: BigNumber }
  >;

  "userData(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { previousRewards: BigNumber; sNot: BigNumber }
  >;

  callStatic: {
    boundToken(overrides?: CallOverrides): Promise<string>;

    "boundToken()"(overrides?: CallOverrides): Promise<string>;

    calculateTokenewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTokenewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimDividendRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    "claimDividendRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    depositDividendRewards(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositDividendRewards(uint256,uint256)"(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      _rewardToken: string,
      _master: string,
      _boundToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address,address)"(
      _rewardToken: string,
      _master: string,
      _boundToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    master(overrides?: CallOverrides): Promise<string>;

    "master()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    rewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPreviouseRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPreviouseRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBuy(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBuy()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { previousRewards: BigNumber; sNot: BigNumber }
    >;

    "userData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { previousRewards: BigNumber; sNot: BigNumber }
    >;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    boundToken(overrides?: CallOverrides): Promise<BigNumber>;

    "boundToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateTokenewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTokenewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimDividendRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimDividendRewards(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositDividendRewards(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositDividendRewards(uint256,uint256)"(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _rewardToken: string,
      _master: string,
      _boundToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(address,address,address)"(
      _rewardToken: string,
      _master: string,
      _boundToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    "master()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPreviouseRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPreviouseRewards(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBuy(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBuy()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    boundToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "boundToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateTokenewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateTokenewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimDividendRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimDividendRewards(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositDividendRewards(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositDividendRewards(uint256,uint256)"(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _rewardToken: string,
      _master: string,
      _boundToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(address,address,address)"(
      _rewardToken: string,
      _master: string,
      _boundToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "master()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsPerShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPreviouseRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPreviouseRewards(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBuy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBuy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
