/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IDVATransferManagerInterface extends ethers.utils.Interface {
  functions: {
    "approveTransfer(bytes32)": FunctionFragment;
    "calculateTransferID(uint256,address,address,uint256)": FunctionFragment;
    "cancelTransfer(bytes32)": FunctionFragment;
    "delegateApproveTransfer(bytes32,tuple[])": FunctionFragment;
    "getApprovalCriteria(address)": FunctionFragment;
    "getNextApprover(bytes32)": FunctionFragment;
    "getNextTxNonce()": FunctionFragment;
    "getTransfer(bytes32)": FunctionFragment;
    "initiateTransfer(address,address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "rejectTransfer(bytes32)": FunctionFragment;
    "setApprovalCriteria(address,bool,bool,bool,address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTransferID",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateApproveTransfer",
    values: [BytesLike, { v: BigNumberish; r: BytesLike; s: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovalCriteria",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextApprover",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextTxNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalCriteria",
    values: [string, boolean, boolean, boolean, string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTransferID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateApproveTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovalCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextTxNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalCriteria",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalCriteriaSet(address,bool,bool,bool,address[],bytes32)": EventFragment;
    "TransferApprovalStateReset(bytes32,bytes32)": EventFragment;
    "TransferApproved(bytes32,address)": EventFragment;
    "TransferCancelled(bytes32)": EventFragment;
    "TransferCompleted(bytes32,address,address,address,uint256)": EventFragment;
    "TransferInitiated(bytes32,address,address,address,uint256,bytes32)": EventFragment;
    "TransferRejected(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalCriteriaSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferApprovalStateReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRejected"): EventFragment;
}

export class IDVATransferManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDVATransferManagerInterface;

  functions: {
    approveTransfer(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approveTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateTransferID(
      _nonce: BigNumberish,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "calculateTransferID(uint256,address,address,uint256)"(
      _nonce: BigNumberish,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cancelTransfer(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateApproveTransfer(
      transferID: BytesLike,
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "delegateApproveTransfer(bytes32,tuple[])"(
      transferID: BytesLike,
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApprovalCriteria(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, boolean, string[], string] & {
          includeRecipientApprover: boolean;
          includeAgentApprover: boolean;
          sequentialApproval: boolean;
          additionalApprovers: string[];
          hash: string;
        }
      ]
    >;

    "getApprovalCriteria(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, boolean, string[], string] & {
          includeRecipientApprover: boolean;
          includeAgentApprover: boolean;
          sequentialApproval: boolean;
          additionalApprovers: string[];
          hash: string;
        }
      ]
    >;

    getNextApprover(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { nextApprover: string; anyTokenAgent: boolean }
    >;

    "getNextApprover(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { nextApprover: string; anyTokenAgent: boolean }
    >;

    getNextTxNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNextTxNonce()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTransfer(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          number,
          ([string, boolean, boolean] & {
            wallet: string;
            anyTokenAgent: boolean;
            approved: boolean;
          })[],
          string
        ] & {
          tokenAddress: string;
          sender: string;
          recipient: string;
          amount: BigNumber;
          status: number;
          approvers: ([string, boolean, boolean] & {
            wallet: string;
            anyTokenAgent: boolean;
            approved: boolean;
          })[];
          approvalCriteriaHash: string;
        }
      ]
    >;

    "getTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          number,
          ([string, boolean, boolean] & {
            wallet: string;
            anyTokenAgent: boolean;
            approved: boolean;
          })[],
          string
        ] & {
          tokenAddress: string;
          sender: string;
          recipient: string;
          amount: BigNumber;
          status: number;
          approvers: ([string, boolean, boolean] & {
            wallet: string;
            anyTokenAgent: boolean;
            approved: boolean;
          })[];
          approvalCriteriaHash: string;
        }
      ]
    >;

    initiateTransfer(
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initiateTransfer(address,address,uint256)"(
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string] & { _name: string }>;

    "name()"(overrides?: CallOverrides): Promise<[string] & { _name: string }>;

    rejectTransfer(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rejectTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalCriteria(
      tokenAddress: string,
      includeRecipientApprover: boolean,
      includeAgentApprover: boolean,
      sequentialApproval: boolean,
      additionalApprovers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApprovalCriteria(address,bool,bool,bool,address[])"(
      tokenAddress: string,
      includeRecipientApprover: boolean,
      includeAgentApprover: boolean,
      sequentialApproval: boolean,
      additionalApprovers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveTransfer(
    transferID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approveTransfer(bytes32)"(
    transferID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateTransferID(
    _nonce: BigNumberish,
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "calculateTransferID(uint256,address,address,uint256)"(
    _nonce: BigNumberish,
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  cancelTransfer(
    transferID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelTransfer(bytes32)"(
    transferID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateApproveTransfer(
    transferID: BytesLike,
    signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "delegateApproveTransfer(bytes32,tuple[])"(
    transferID: BytesLike,
    signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApprovalCriteria(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, string[], string] & {
      includeRecipientApprover: boolean;
      includeAgentApprover: boolean;
      sequentialApproval: boolean;
      additionalApprovers: string[];
      hash: string;
    }
  >;

  "getApprovalCriteria(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, string[], string] & {
      includeRecipientApprover: boolean;
      includeAgentApprover: boolean;
      sequentialApproval: boolean;
      additionalApprovers: string[];
      hash: string;
    }
  >;

  getNextApprover(
    transferID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { nextApprover: string; anyTokenAgent: boolean }
  >;

  "getNextApprover(bytes32)"(
    transferID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { nextApprover: string; anyTokenAgent: boolean }
  >;

  getNextTxNonce(overrides?: CallOverrides): Promise<BigNumber>;

  "getNextTxNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTransfer(
    transferID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      number,
      ([string, boolean, boolean] & {
        wallet: string;
        anyTokenAgent: boolean;
        approved: boolean;
      })[],
      string
    ] & {
      tokenAddress: string;
      sender: string;
      recipient: string;
      amount: BigNumber;
      status: number;
      approvers: ([string, boolean, boolean] & {
        wallet: string;
        anyTokenAgent: boolean;
        approved: boolean;
      })[];
      approvalCriteriaHash: string;
    }
  >;

  "getTransfer(bytes32)"(
    transferID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      number,
      ([string, boolean, boolean] & {
        wallet: string;
        anyTokenAgent: boolean;
        approved: boolean;
      })[],
      string
    ] & {
      tokenAddress: string;
      sender: string;
      recipient: string;
      amount: BigNumber;
      status: number;
      approvers: ([string, boolean, boolean] & {
        wallet: string;
        anyTokenAgent: boolean;
        approved: boolean;
      })[];
      approvalCriteriaHash: string;
    }
  >;

  initiateTransfer(
    tokenAddress: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initiateTransfer(address,address,uint256)"(
    tokenAddress: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  rejectTransfer(
    transferID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rejectTransfer(bytes32)"(
    transferID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalCriteria(
    tokenAddress: string,
    includeRecipientApprover: boolean,
    includeAgentApprover: boolean,
    sequentialApproval: boolean,
    additionalApprovers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApprovalCriteria(address,bool,bool,bool,address[])"(
    tokenAddress: string,
    includeRecipientApprover: boolean,
    includeAgentApprover: boolean,
    sequentialApproval: boolean,
    additionalApprovers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveTransfer(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateTransferID(
      _nonce: BigNumberish,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "calculateTransferID(uint256,address,address,uint256)"(
      _nonce: BigNumberish,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    cancelTransfer(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateApproveTransfer(
      transferID: BytesLike,
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateApproveTransfer(bytes32,tuple[])"(
      transferID: BytesLike,
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getApprovalCriteria(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, string[], string] & {
        includeRecipientApprover: boolean;
        includeAgentApprover: boolean;
        sequentialApproval: boolean;
        additionalApprovers: string[];
        hash: string;
      }
    >;

    "getApprovalCriteria(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, string[], string] & {
        includeRecipientApprover: boolean;
        includeAgentApprover: boolean;
        sequentialApproval: boolean;
        additionalApprovers: string[];
        hash: string;
      }
    >;

    getNextApprover(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { nextApprover: string; anyTokenAgent: boolean }
    >;

    "getNextApprover(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { nextApprover: string; anyTokenAgent: boolean }
    >;

    getNextTxNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextTxNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTransfer(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        number,
        ([string, boolean, boolean] & {
          wallet: string;
          anyTokenAgent: boolean;
          approved: boolean;
        })[],
        string
      ] & {
        tokenAddress: string;
        sender: string;
        recipient: string;
        amount: BigNumber;
        status: number;
        approvers: ([string, boolean, boolean] & {
          wallet: string;
          anyTokenAgent: boolean;
          approved: boolean;
        })[];
        approvalCriteriaHash: string;
      }
    >;

    "getTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        number,
        ([string, boolean, boolean] & {
          wallet: string;
          anyTokenAgent: boolean;
          approved: boolean;
        })[],
        string
      ] & {
        tokenAddress: string;
        sender: string;
        recipient: string;
        amount: BigNumber;
        status: number;
        approvers: ([string, boolean, boolean] & {
          wallet: string;
          anyTokenAgent: boolean;
          approved: boolean;
        })[];
        approvalCriteriaHash: string;
      }
    >;

    initiateTransfer(
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateTransfer(address,address,uint256)"(
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    rejectTransfer(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "rejectTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalCriteria(
      tokenAddress: string,
      includeRecipientApprover: boolean,
      includeAgentApprover: boolean,
      sequentialApproval: boolean,
      additionalApprovers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalCriteria(address,bool,bool,bool,address[])"(
      tokenAddress: string,
      includeRecipientApprover: boolean,
      includeAgentApprover: boolean,
      sequentialApproval: boolean,
      additionalApprovers: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ApprovalCriteriaSet(
      tokenAddress: null,
      includeRecipientApprover: null,
      includeAgentApprover: null,
      sequentialApproval: null,
      additionalApprovers: null,
      hash: null
    ): TypedEventFilter<
      [string, boolean, boolean, boolean, string[], string],
      {
        tokenAddress: string;
        includeRecipientApprover: boolean;
        includeAgentApprover: boolean;
        sequentialApproval: boolean;
        additionalApprovers: string[];
        hash: string;
      }
    >;

    TransferApprovalStateReset(
      transferID: null,
      approvalCriteriaHash: null
    ): TypedEventFilter<
      [string, string],
      { transferID: string; approvalCriteriaHash: string }
    >;

    TransferApproved(
      transferID: null,
      approver: null
    ): TypedEventFilter<
      [string, string],
      { transferID: string; approver: string }
    >;

    TransferCancelled(
      transferID: null
    ): TypedEventFilter<[string], { transferID: string }>;

    TransferCompleted(
      transferID: null,
      tokenAddress: null,
      sender: null,
      recipient: null,
      amount: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        transferID: string;
        tokenAddress: string;
        sender: string;
        recipient: string;
        amount: BigNumber;
      }
    >;

    TransferInitiated(
      transferID: null,
      tokenAddress: null,
      sender: null,
      recipient: null,
      amount: null,
      approvalCriteriaHash: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        transferID: string;
        tokenAddress: string;
        sender: string;
        recipient: string;
        amount: BigNumber;
        approvalCriteriaHash: string;
      }
    >;

    TransferRejected(
      transferID: null,
      rejectedBy: null
    ): TypedEventFilter<
      [string, string],
      { transferID: string; rejectedBy: string }
    >;
  };

  estimateGas: {
    approveTransfer(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approveTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateTransferID(
      _nonce: BigNumberish,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTransferID(uint256,address,address,uint256)"(
      _nonce: BigNumberish,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelTransfer(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateApproveTransfer(
      transferID: BytesLike,
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "delegateApproveTransfer(bytes32,tuple[])"(
      transferID: BytesLike,
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApprovalCriteria(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApprovalCriteria(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextApprover(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextApprover(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextTxNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextTxNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTransfer(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateTransfer(
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initiateTransfer(address,address,uint256)"(
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    rejectTransfer(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rejectTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalCriteria(
      tokenAddress: string,
      includeRecipientApprover: boolean,
      includeAgentApprover: boolean,
      sequentialApproval: boolean,
      additionalApprovers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApprovalCriteria(address,bool,bool,bool,address[])"(
      tokenAddress: string,
      includeRecipientApprover: boolean,
      includeAgentApprover: boolean,
      sequentialApproval: boolean,
      additionalApprovers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveTransfer(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approveTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateTransferID(
      _nonce: BigNumberish,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateTransferID(uint256,address,address,uint256)"(
      _nonce: BigNumberish,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelTransfer(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateApproveTransfer(
      transferID: BytesLike,
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "delegateApproveTransfer(bytes32,tuple[])"(
      transferID: BytesLike,
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApprovalCriteria(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApprovalCriteria(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextApprover(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextApprover(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextTxNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNextTxNonce()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransfer(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateTransfer(
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initiateTransfer(address,address,uint256)"(
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectTransfer(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rejectTransfer(bytes32)"(
      transferID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalCriteria(
      tokenAddress: string,
      includeRecipientApprover: boolean,
      includeAgentApprover: boolean,
      sequentialApproval: boolean,
      additionalApprovers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalCriteria(address,bool,bool,bool,address[])"(
      tokenAddress: string,
      includeRecipientApprover: boolean,
      includeAgentApprover: boolean,
      sequentialApproval: boolean,
      additionalApprovers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
