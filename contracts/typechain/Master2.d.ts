/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface Master2Interface extends ethers.utils.Interface {
  functions: {
    "USDCCalculation(uint8,uint256)": FunctionFragment;
    "burnToken(address[],uint256[],uint256[])": FunctionFragment;
    "freezeTokens(address[],uint256[],uint256[])": FunctionFragment;
    "frzUnfrzUserAddress(address[],bool[],uint256[])": FunctionFragment;
    "master()": FunctionFragment;
    "mintTokens(address[],uint256[],uint256[])": FunctionFragment;
    "rejectBuy(address[],uint256[],uint256[])": FunctionFragment;
    "unfreezeTokens(address[],uint256[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "USDCCalculation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnToken",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeTokens",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "frzUnfrzUserAddress",
    values: [string[], boolean[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectBuy",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeTokens",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "USDCCalculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frzUnfrzUserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rejectBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeTokens",
    data: BytesLike
  ): Result;

  events: {
    "burn(address,address,address,uint256,uint256)": EventFragment;
    "freezeTkn(address,uint256,address,address,uint256)": EventFragment;
    "frzUnfrzUser(address,bool,address,address,uint256)": EventFragment;
    "reject(address,uint256,address,address,uint256)": EventFragment;
    "tokenMint(address,uint256,address,address,uint256)": EventFragment;
    "unFreezeTkn(address,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "freezeTkn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "frzUnfrzUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "reject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tokenMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "unFreezeTkn"): EventFragment;
}

export class Master2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Master2Interface;

  functions: {
    USDCCalculation(
      _prjctId: BigNumberish,
      _tknAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "USDCCalculation(uint8,uint256)"(
      _prjctId: BigNumberish,
      _tknAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnToken(
      _userAddress: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnToken(address[],uint256[],uint256[])"(
      _userAddress: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeTokens(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "freezeTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    frzUnfrzUserAddress(
      _userAddress: string[],
      _freeze: boolean[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "frzUnfrzUserAddress(address[],bool[],uint256[])"(
      _userAddress: string[],
      _freeze: boolean[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    master(overrides?: CallOverrides): Promise<[string]>;

    "master()"(overrides?: CallOverrides): Promise<[string]>;

    mintTokens(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rejectBuy(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rejectBuy(address[],uint256[],uint256[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unfreezeTokens(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unfreezeTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  USDCCalculation(
    _prjctId: BigNumberish,
    _tknAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "USDCCalculation(uint8,uint256)"(
    _prjctId: BigNumberish,
    _tknAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnToken(
    _userAddress: string[],
    _amount: BigNumberish[],
    _prjctId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnToken(address[],uint256[],uint256[])"(
    _userAddress: string[],
    _amount: BigNumberish[],
    _prjctId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeTokens(
    _user: string[],
    _amount: BigNumberish[],
    _prjctId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "freezeTokens(address[],uint256[],uint256[])"(
    _user: string[],
    _amount: BigNumberish[],
    _prjctId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  frzUnfrzUserAddress(
    _userAddress: string[],
    _freeze: boolean[],
    _prjctId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "frzUnfrzUserAddress(address[],bool[],uint256[])"(
    _userAddress: string[],
    _freeze: boolean[],
    _prjctId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  master(overrides?: CallOverrides): Promise<string>;

  "master()"(overrides?: CallOverrides): Promise<string>;

  mintTokens(
    _user: string[],
    _prjctId: BigNumberish[],
    _buyID: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintTokens(address[],uint256[],uint256[])"(
    _user: string[],
    _prjctId: BigNumberish[],
    _buyID: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rejectBuy(
    _user: string[],
    _prjctId: BigNumberish[],
    _buyID: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rejectBuy(address[],uint256[],uint256[])"(
    _user: string[],
    _prjctId: BigNumberish[],
    _buyID: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unfreezeTokens(
    _user: string[],
    _amount: BigNumberish[],
    _prjctId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unfreezeTokens(address[],uint256[],uint256[])"(
    _user: string[],
    _amount: BigNumberish[],
    _prjctId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    USDCCalculation(
      _prjctId: BigNumberish,
      _tknAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "USDCCalculation(uint8,uint256)"(
      _prjctId: BigNumberish,
      _tknAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnToken(
      _userAddress: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "burnToken(address[],uint256[],uint256[])"(
      _userAddress: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    freezeTokens(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "freezeTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    frzUnfrzUserAddress(
      _userAddress: string[],
      _freeze: boolean[],
      _prjctId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "frzUnfrzUserAddress(address[],bool[],uint256[])"(
      _userAddress: string[],
      _freeze: boolean[],
      _prjctId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    master(overrides?: CallOverrides): Promise<string>;

    "master()"(overrides?: CallOverrides): Promise<string>;

    mintTokens(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mintTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    rejectBuy(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "rejectBuy(address[],uint256[],uint256[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeTokens(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "unfreezeTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    burn(
      user: null,
      agent: null,
      token: null,
      amount: null,
      projectId: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        user: string;
        agent: string;
        token: string;
        amount: BigNumber;
        projectId: BigNumber;
      }
    >;

    freezeTkn(
      user: null,
      amount: null,
      token: null,
      agent: null,
      projectId: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        amount: BigNumber;
        token: string;
        agent: string;
        projectId: BigNumber;
      }
    >;

    frzUnfrzUser(
      user: null,
      freeze: null,
      token: null,
      agent: null,
      projectId: null
    ): TypedEventFilter<
      [string, boolean, string, string, BigNumber],
      {
        user: string;
        freeze: boolean;
        token: string;
        agent: string;
        projectId: BigNumber;
      }
    >;

    reject(
      user: null,
      amount: null,
      token: null,
      agent: null,
      buyCounter: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        amount: BigNumber;
        token: string;
        agent: string;
        buyCounter: BigNumber;
      }
    >;

    tokenMint(
      user: null,
      mintAmount: null,
      token: null,
      agent: null,
      buyCounter: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        mintAmount: BigNumber;
        token: string;
        agent: string;
        buyCounter: BigNumber;
      }
    >;

    unFreezeTkn(
      user: null,
      amount: null,
      token: null,
      agent: null,
      projectId: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        amount: BigNumber;
        token: string;
        agent: string;
        projectId: BigNumber;
      }
    >;
  };

  estimateGas: {
    USDCCalculation(
      _prjctId: BigNumberish,
      _tknAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "USDCCalculation(uint8,uint256)"(
      _prjctId: BigNumberish,
      _tknAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnToken(
      _userAddress: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnToken(address[],uint256[],uint256[])"(
      _userAddress: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeTokens(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "freezeTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    frzUnfrzUserAddress(
      _userAddress: string[],
      _freeze: boolean[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "frzUnfrzUserAddress(address[],bool[],uint256[])"(
      _userAddress: string[],
      _freeze: boolean[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    "master()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintTokens(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rejectBuy(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rejectBuy(address[],uint256[],uint256[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unfreezeTokens(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unfreezeTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    USDCCalculation(
      _prjctId: BigNumberish,
      _tknAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "USDCCalculation(uint8,uint256)"(
      _prjctId: BigNumberish,
      _tknAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnToken(
      _userAddress: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnToken(address[],uint256[],uint256[])"(
      _userAddress: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeTokens(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "freezeTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    frzUnfrzUserAddress(
      _userAddress: string[],
      _freeze: boolean[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "frzUnfrzUserAddress(address[],bool[],uint256[])"(
      _userAddress: string[],
      _freeze: boolean[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "master()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintTokens(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rejectBuy(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rejectBuy(address[],uint256[],uint256[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _buyID: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unfreezeTokens(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unfreezeTokens(address[],uint256[],uint256[])"(
      _user: string[],
      _amount: BigNumberish[],
      _prjctId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
