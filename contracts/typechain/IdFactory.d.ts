/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IdFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addTokenFactory(address,address)": FunctionFragment;
    "createIdentity(address,string)": FunctionFragment;
    "createIdentityWithManagementKeys(address,string,bytes32[])": FunctionFragment;
    "createTokenIdentity(address,address,string)": FunctionFragment;
    "getIdentity(address)": FunctionFragment;
    "getToken(address)": FunctionFragment;
    "getWallets(address)": FunctionFragment;
    "implementationAuthority()": FunctionFragment;
    "isSaltTaken(string)": FunctionFragment;
    "isTokenFactory(address)": FunctionFragment;
    "linkWallet(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeTokenFactory(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlinkWallet(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTokenFactory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createIdentity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createIdentityWithManagementKeys",
    values: [string, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenIdentity",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "getIdentity", values: [string]): string;
  encodeFunctionData(functionFragment: "getToken", values: [string]): string;
  encodeFunctionData(functionFragment: "getWallets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "implementationAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isSaltTaken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTokenFactory",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "linkWallet", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTokenFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkWallet",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIdentityWithManagementKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementationAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSaltTaken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkWallet",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenFactoryAdded(address)": EventFragment;
    "TokenFactoryRemoved(address)": EventFragment;
    "TokenLinked(address,address)": EventFragment;
    "WalletLinked(address,address)": EventFragment;
    "WalletUnlinked(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenFactoryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenFactoryRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletUnlinked"): EventFragment;
}

export class IdFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IdFactoryInterface;

  functions: {
    addTokenFactory(
      _factory: string,
      _master: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addTokenFactory(address,address)"(
      _factory: string,
      _master: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIdentity(
      _wallet: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createIdentity(address,string)"(
      _wallet: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIdentityWithManagementKeys(
      _wallet: string,
      _salt: string,
      _managementKeys: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createIdentityWithManagementKeys(address,string,bytes32[])"(
      _wallet: string,
      _salt: string,
      _managementKeys: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTokenIdentity(
      _token: string,
      _tokenOwner: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createTokenIdentity(address,address,string)"(
      _token: string,
      _tokenOwner: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIdentity(_wallet: string, overrides?: CallOverrides): Promise<[string]>;

    "getIdentity(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getToken(_identity: string, overrides?: CallOverrides): Promise<[string]>;

    "getToken(address)"(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWallets(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getWallets(address)"(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    implementationAuthority(overrides?: CallOverrides): Promise<[string]>;

    "implementationAuthority()"(overrides?: CallOverrides): Promise<[string]>;

    isSaltTaken(_salt: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isSaltTaken(string)"(
      _salt: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenFactory(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTokenFactory(address)"(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    linkWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "linkWallet(address)"(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeTokenFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeTokenFactory(address)"(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkWallet(
      _oldWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlinkWallet(address)"(
      _oldWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTokenFactory(
    _factory: string,
    _master: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addTokenFactory(address,address)"(
    _factory: string,
    _master: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIdentity(
    _wallet: string,
    _salt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createIdentity(address,string)"(
    _wallet: string,
    _salt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIdentityWithManagementKeys(
    _wallet: string,
    _salt: string,
    _managementKeys: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createIdentityWithManagementKeys(address,string,bytes32[])"(
    _wallet: string,
    _salt: string,
    _managementKeys: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTokenIdentity(
    _token: string,
    _tokenOwner: string,
    _salt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createTokenIdentity(address,address,string)"(
    _token: string,
    _tokenOwner: string,
    _salt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIdentity(_wallet: string, overrides?: CallOverrides): Promise<string>;

  "getIdentity(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getToken(_identity: string, overrides?: CallOverrides): Promise<string>;

  "getToken(address)"(
    _identity: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getWallets(_identity: string, overrides?: CallOverrides): Promise<string[]>;

  "getWallets(address)"(
    _identity: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  implementationAuthority(overrides?: CallOverrides): Promise<string>;

  "implementationAuthority()"(overrides?: CallOverrides): Promise<string>;

  isSaltTaken(_salt: string, overrides?: CallOverrides): Promise<boolean>;

  "isSaltTaken(string)"(
    _salt: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenFactory(_factory: string, overrides?: CallOverrides): Promise<boolean>;

  "isTokenFactory(address)"(
    _factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  linkWallet(
    _newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "linkWallet(address)"(
    _newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeTokenFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeTokenFactory(address)"(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkWallet(
    _oldWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlinkWallet(address)"(
    _oldWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTokenFactory(
      _factory: string,
      _master: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTokenFactory(address,address)"(
      _factory: string,
      _master: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createIdentity(
      _wallet: string,
      _salt: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createIdentity(address,string)"(
      _wallet: string,
      _salt: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createIdentityWithManagementKeys(
      _wallet: string,
      _salt: string,
      _managementKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "createIdentityWithManagementKeys(address,string,bytes32[])"(
      _wallet: string,
      _salt: string,
      _managementKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    createTokenIdentity(
      _token: string,
      _tokenOwner: string,
      _salt: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createTokenIdentity(address,address,string)"(
      _token: string,
      _tokenOwner: string,
      _salt: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getIdentity(_wallet: string, overrides?: CallOverrides): Promise<string>;

    "getIdentity(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getToken(_identity: string, overrides?: CallOverrides): Promise<string>;

    "getToken(address)"(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getWallets(_identity: string, overrides?: CallOverrides): Promise<string[]>;

    "getWallets(address)"(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    implementationAuthority(overrides?: CallOverrides): Promise<string>;

    "implementationAuthority()"(overrides?: CallOverrides): Promise<string>;

    isSaltTaken(_salt: string, overrides?: CallOverrides): Promise<boolean>;

    "isSaltTaken(string)"(
      _salt: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenFactory(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTokenFactory(address)"(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    linkWallet(_newWallet: string, overrides?: CallOverrides): Promise<void>;

    "linkWallet(address)"(
      _newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeTokenFactory(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTokenFactory(address)"(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkWallet(_oldWallet: string, overrides?: CallOverrides): Promise<void>;

    "unlinkWallet(address)"(
      _oldWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deployed(
      _addr: string | null
    ): TypedEventFilter<[string], { _addr: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TokenFactoryAdded(
      factory: string | null
    ): TypedEventFilter<[string], { factory: string }>;

    TokenFactoryRemoved(
      factory: string | null
    ): TypedEventFilter<[string], { factory: string }>;

    TokenLinked(
      token: string | null,
      identity: string | null
    ): TypedEventFilter<[string, string], { token: string; identity: string }>;

    WalletLinked(
      wallet: string | null,
      identity: string | null
    ): TypedEventFilter<[string, string], { wallet: string; identity: string }>;

    WalletUnlinked(
      wallet: string | null,
      identity: string | null
    ): TypedEventFilter<[string, string], { wallet: string; identity: string }>;
  };

  estimateGas: {
    addTokenFactory(
      _factory: string,
      _master: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addTokenFactory(address,address)"(
      _factory: string,
      _master: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIdentity(
      _wallet: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createIdentity(address,string)"(
      _wallet: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIdentityWithManagementKeys(
      _wallet: string,
      _salt: string,
      _managementKeys: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createIdentityWithManagementKeys(address,string,bytes32[])"(
      _wallet: string,
      _salt: string,
      _managementKeys: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTokenIdentity(
      _token: string,
      _tokenOwner: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createTokenIdentity(address,address,string)"(
      _token: string,
      _tokenOwner: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIdentity(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getIdentity(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(_identity: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getToken(address)"(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWallets(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWallets(address)"(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementationAuthority(overrides?: CallOverrides): Promise<BigNumber>;

    "implementationAuthority()"(overrides?: CallOverrides): Promise<BigNumber>;

    isSaltTaken(_salt: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isSaltTaken(string)"(
      _salt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenFactory(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTokenFactory(address)"(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "linkWallet(address)"(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeTokenFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeTokenFactory(address)"(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkWallet(
      _oldWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlinkWallet(address)"(
      _oldWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokenFactory(
      _factory: string,
      _master: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addTokenFactory(address,address)"(
      _factory: string,
      _master: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIdentity(
      _wallet: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createIdentity(address,string)"(
      _wallet: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIdentityWithManagementKeys(
      _wallet: string,
      _salt: string,
      _managementKeys: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createIdentityWithManagementKeys(address,string,bytes32[])"(
      _wallet: string,
      _salt: string,
      _managementKeys: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTokenIdentity(
      _token: string,
      _tokenOwner: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createTokenIdentity(address,address,string)"(
      _token: string,
      _tokenOwner: string,
      _salt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIdentity(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIdentity(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getToken(address)"(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWallets(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWallets(address)"(
      _identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementationAuthority(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "implementationAuthority()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSaltTaken(
      _salt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSaltTaken(string)"(
      _salt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenFactory(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTokenFactory(address)"(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "linkWallet(address)"(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTokenFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeTokenFactory(address)"(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkWallet(
      _oldWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlinkWallet(address)"(
      _oldWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
