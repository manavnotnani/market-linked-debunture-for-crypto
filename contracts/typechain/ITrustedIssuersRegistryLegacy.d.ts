/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ITrustedIssuersRegistryLegacyInterface
  extends ethers.utils.Interface {
  functions: {
    "addTrustedIssuer(address,uint256[])": FunctionFragment;
    "getTrustedIssuerClaimTopics(address)": FunctionFragment;
    "getTrustedIssuers()": FunctionFragment;
    "hasClaimTopic(address,uint256)": FunctionFragment;
    "isTrustedIssuer(address)": FunctionFragment;
    "removeTrustedIssuer(address)": FunctionFragment;
    "transferOwnershipOnIssuersRegistryContract(address)": FunctionFragment;
    "updateIssuerClaimTopics(address,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTrustedIssuer",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedIssuerClaimTopics",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedIssuers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimTopic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipOnIssuersRegistryContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIssuerClaimTopics",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedIssuerClaimTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipOnIssuersRegistryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIssuerClaimTopics",
    data: BytesLike
  ): Result;

  events: {
    "ClaimTopicsUpdated(address,uint256[])": EventFragment;
    "TrustedIssuerAdded(address,uint256[])": EventFragment;
    "TrustedIssuerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimTopicsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedIssuerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedIssuerRemoved"): EventFragment;
}

export class ITrustedIssuersRegistryLegacy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITrustedIssuersRegistryLegacyInterface;

  functions: {
    addTrustedIssuer(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addTrustedIssuer(address,uint256[])"(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTrustedIssuerClaimTopics(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getTrustedIssuerClaimTopics(address)"(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTrustedIssuers(overrides?: CallOverrides): Promise<[string[]]>;

    "getTrustedIssuers()"(overrides?: CallOverrides): Promise<[string[]]>;

    hasClaimTopic(
      _issuer: string,
      _claimTopic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasClaimTopic(address,uint256)"(
      _issuer: string,
      _claimTopic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedIssuer(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTrustedIssuer(address)"(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeTrustedIssuer(
      _trustedIssuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeTrustedIssuer(address)"(
      _trustedIssuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnershipOnIssuersRegistryContract(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnershipOnIssuersRegistryContract(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIssuerClaimTopics(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateIssuerClaimTopics(address,uint256[])"(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTrustedIssuer(
    _trustedIssuer: string,
    _claimTopics: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addTrustedIssuer(address,uint256[])"(
    _trustedIssuer: string,
    _claimTopics: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTrustedIssuerClaimTopics(
    _trustedIssuer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getTrustedIssuerClaimTopics(address)"(
    _trustedIssuer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTrustedIssuers(overrides?: CallOverrides): Promise<string[]>;

  "getTrustedIssuers()"(overrides?: CallOverrides): Promise<string[]>;

  hasClaimTopic(
    _issuer: string,
    _claimTopic: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasClaimTopic(address,uint256)"(
    _issuer: string,
    _claimTopic: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedIssuer(_issuer: string, overrides?: CallOverrides): Promise<boolean>;

  "isTrustedIssuer(address)"(
    _issuer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeTrustedIssuer(
    _trustedIssuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeTrustedIssuer(address)"(
    _trustedIssuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnershipOnIssuersRegistryContract(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnershipOnIssuersRegistryContract(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIssuerClaimTopics(
    _trustedIssuer: string,
    _claimTopics: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateIssuerClaimTopics(address,uint256[])"(
    _trustedIssuer: string,
    _claimTopics: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTrustedIssuer(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addTrustedIssuer(address,uint256[])"(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getTrustedIssuerClaimTopics(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getTrustedIssuerClaimTopics(address)"(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTrustedIssuers(overrides?: CallOverrides): Promise<string[]>;

    "getTrustedIssuers()"(overrides?: CallOverrides): Promise<string[]>;

    hasClaimTopic(
      _issuer: string,
      _claimTopic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasClaimTopic(address,uint256)"(
      _issuer: string,
      _claimTopic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedIssuer(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedIssuer(address)"(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeTrustedIssuer(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTrustedIssuer(address)"(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnershipOnIssuersRegistryContract(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnershipOnIssuersRegistryContract(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIssuerClaimTopics(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateIssuerClaimTopics(address,uint256[])"(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ClaimTopicsUpdated(
      trustedIssuer: string | null,
      claimTopics: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { trustedIssuer: string; claimTopics: BigNumber[] }
    >;

    TrustedIssuerAdded(
      trustedIssuer: string | null,
      claimTopics: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { trustedIssuer: string; claimTopics: BigNumber[] }
    >;

    TrustedIssuerRemoved(
      trustedIssuer: string | null
    ): TypedEventFilter<[string], { trustedIssuer: string }>;
  };

  estimateGas: {
    addTrustedIssuer(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addTrustedIssuer(address,uint256[])"(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTrustedIssuerClaimTopics(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTrustedIssuerClaimTopics(address)"(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedIssuers(overrides?: CallOverrides): Promise<BigNumber>;

    "getTrustedIssuers()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasClaimTopic(
      _issuer: string,
      _claimTopic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasClaimTopic(address,uint256)"(
      _issuer: string,
      _claimTopic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedIssuer(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTrustedIssuer(address)"(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTrustedIssuer(
      _trustedIssuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeTrustedIssuer(address)"(
      _trustedIssuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnershipOnIssuersRegistryContract(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnershipOnIssuersRegistryContract(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIssuerClaimTopics(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateIssuerClaimTopics(address,uint256[])"(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTrustedIssuer(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addTrustedIssuer(address,uint256[])"(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTrustedIssuerClaimTopics(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTrustedIssuerClaimTopics(address)"(
      _trustedIssuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedIssuers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTrustedIssuers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimTopic(
      _issuer: string,
      _claimTopic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasClaimTopic(address,uint256)"(
      _issuer: string,
      _claimTopic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedIssuer(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTrustedIssuer(address)"(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTrustedIssuer(
      _trustedIssuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeTrustedIssuer(address)"(
      _trustedIssuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnershipOnIssuersRegistryContract(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnershipOnIssuersRegistryContract(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIssuerClaimTopics(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateIssuerClaimTopics(address,uint256[])"(
      _trustedIssuer: string,
      _claimTopics: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
