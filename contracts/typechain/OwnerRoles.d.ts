/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OwnerRolesInterface extends ethers.utils.Interface {
  functions: {
    "addClaimRegistryManager(address)": FunctionFragment;
    "addComplianceManager(address)": FunctionFragment;
    "addComplianceSetter(address)": FunctionFragment;
    "addIssuersRegistryManager(address)": FunctionFragment;
    "addOwnerAdmin(address)": FunctionFragment;
    "addRegistryAddressSetter(address)": FunctionFragment;
    "addTokenInfoManager(address)": FunctionFragment;
    "isClaimRegistryManager(address)": FunctionFragment;
    "isComplianceManager(address)": FunctionFragment;
    "isComplianceSetter(address)": FunctionFragment;
    "isIssuersRegistryManager(address)": FunctionFragment;
    "isOwnerAdmin(address)": FunctionFragment;
    "isRegistryAddressSetter(address)": FunctionFragment;
    "isTokenInfoManager(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeClaimRegistryManager(address)": FunctionFragment;
    "removeComplianceManager(address)": FunctionFragment;
    "removeComplianceSetter(address)": FunctionFragment;
    "removeIssuersRegistryManager(address)": FunctionFragment;
    "removeOwnerAdmin(address)": FunctionFragment;
    "removeRegistryAddressSetter(address)": FunctionFragment;
    "removeTokenInfoManager(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addClaimRegistryManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addComplianceManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addComplianceSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuersRegistryManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOwnerAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRegistryAddressSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenInfoManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimRegistryManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isComplianceManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isComplianceSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuersRegistryManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistryAddressSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenInfoManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeClaimRegistryManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeComplianceManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeComplianceSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeIssuersRegistryManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwnerAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRegistryAddressSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenInfoManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addClaimRegistryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addComplianceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addComplianceSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIssuersRegistryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOwnerAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRegistryAddressSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenInfoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimRegistryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComplianceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComplianceSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIssuersRegistryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOwnerAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistryAddressSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenInfoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeClaimRegistryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeComplianceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeComplianceSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeIssuersRegistryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwnerAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRegistryAddressSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenInfoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdded(address,string)": EventFragment;
    "RoleRemoved(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRemoved"): EventFragment;
}

export class OwnerRoles extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OwnerRolesInterface;

  functions: {
    addClaimRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addClaimRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addComplianceManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addComplianceManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addComplianceSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addComplianceSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addIssuersRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOwnerAdmin(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addOwnerAdmin(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRegistryAddressSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTokenInfoManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addTokenInfoManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isClaimRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isClaimRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isComplianceManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isComplianceManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isComplianceSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isComplianceSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIssuersRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwnerAdmin(_owner: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isOwnerAdmin(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegistryAddressSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenInfoManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTokenInfoManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeClaimRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeClaimRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeComplianceManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeComplianceManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeComplianceSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeComplianceSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeIssuersRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOwnerAdmin(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeOwnerAdmin(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRegistryAddressSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTokenInfoManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeTokenInfoManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addClaimRegistryManager(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addClaimRegistryManager(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addComplianceManager(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addComplianceManager(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addComplianceSetter(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addComplianceSetter(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addIssuersRegistryManager(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addIssuersRegistryManager(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOwnerAdmin(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addOwnerAdmin(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRegistryAddressSetter(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addRegistryAddressSetter(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTokenInfoManager(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addTokenInfoManager(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isClaimRegistryManager(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isClaimRegistryManager(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isComplianceManager(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isComplianceManager(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isComplianceSetter(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isComplianceSetter(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIssuersRegistryManager(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isIssuersRegistryManager(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwnerAdmin(_owner: string, overrides?: CallOverrides): Promise<boolean>;

  "isOwnerAdmin(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegistryAddressSetter(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegistryAddressSetter(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenInfoManager(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTokenInfoManager(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeClaimRegistryManager(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeClaimRegistryManager(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeComplianceManager(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeComplianceManager(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeComplianceSetter(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeComplianceSetter(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeIssuersRegistryManager(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeIssuersRegistryManager(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOwnerAdmin(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeOwnerAdmin(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRegistryAddressSetter(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeRegistryAddressSetter(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTokenInfoManager(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeTokenInfoManager(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addClaimRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addClaimRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addComplianceManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addComplianceManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addComplianceSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addComplianceSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addIssuersRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addOwnerAdmin(_owner: string, overrides?: CallOverrides): Promise<void>;

    "addOwnerAdmin(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRegistryAddressSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenInfoManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTokenInfoManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isClaimRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isClaimRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isComplianceManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isComplianceManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isComplianceSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isComplianceSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIssuersRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwnerAdmin(_owner: string, overrides?: CallOverrides): Promise<boolean>;

    "isOwnerAdmin(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegistryAddressSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenInfoManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTokenInfoManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeClaimRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeClaimRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeComplianceManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeComplianceManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeComplianceSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeComplianceSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeIssuersRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOwnerAdmin(_owner: string, overrides?: CallOverrides): Promise<void>;

    "removeOwnerAdmin(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRegistryAddressSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTokenInfoManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTokenInfoManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RoleAdded(
      _owner: string | null,
      _role: null
    ): TypedEventFilter<[string, string], { _owner: string; _role: string }>;

    RoleRemoved(
      _owner: string | null,
      _role: null
    ): TypedEventFilter<[string, string], { _owner: string; _role: string }>;
  };

  estimateGas: {
    addClaimRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addClaimRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addComplianceManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addComplianceManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addComplianceSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addComplianceSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addIssuersRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOwnerAdmin(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addOwnerAdmin(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRegistryAddressSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTokenInfoManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addTokenInfoManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isClaimRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isClaimRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isComplianceManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isComplianceManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isComplianceSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isComplianceSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIssuersRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwnerAdmin(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isOwnerAdmin(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistryAddressSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenInfoManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTokenInfoManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeClaimRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeClaimRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeComplianceManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeComplianceManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeComplianceSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeComplianceSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeIssuersRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOwnerAdmin(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeOwnerAdmin(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRegistryAddressSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTokenInfoManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeTokenInfoManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addClaimRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addClaimRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addComplianceManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addComplianceManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addComplianceSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addComplianceSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addIssuersRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOwnerAdmin(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addOwnerAdmin(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRegistryAddressSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTokenInfoManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addTokenInfoManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isClaimRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isClaimRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isComplianceManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isComplianceManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isComplianceSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isComplianceSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIssuersRegistryManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwnerAdmin(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwnerAdmin(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistryAddressSetter(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenInfoManager(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTokenInfoManager(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeClaimRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeClaimRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeComplianceManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeComplianceManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeComplianceSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeComplianceSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeIssuersRegistryManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeIssuersRegistryManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOwnerAdmin(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeOwnerAdmin(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRegistryAddressSetter(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeRegistryAddressSetter(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTokenInfoManager(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeTokenInfoManager(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
