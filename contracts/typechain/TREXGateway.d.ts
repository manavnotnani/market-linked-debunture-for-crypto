/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TREXGatewayInterface extends ethers.utils.Interface {
  functions: {
    "addAgent(address)": FunctionFragment;
    "addDeployer(address)": FunctionFragment;
    "applyFeeDiscount(address,uint16)": FunctionFragment;
    "batchAddDeployer(address[])": FunctionFragment;
    "batchApplyFeeDiscount(address[],uint16[])": FunctionFragment;
    "batchDeployTREXSuite(tuple[],tuple[])": FunctionFragment;
    "batchRemoveDeployer(address[])": FunctionFragment;
    "calculateFee(address)": FunctionFragment;
    "deployTREXSuite(tuple,tuple)": FunctionFragment;
    "enableDeploymentFee(bool)": FunctionFragment;
    "getDeploymentFee()": FunctionFragment;
    "getFactory()": FunctionFragment;
    "getPublicDeploymentStatus()": FunctionFragment;
    "isAgent(address)": FunctionFragment;
    "isDeployer(address)": FunctionFragment;
    "isDeploymentFeeEnabled()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAgent(address)": FunctionFragment;
    "removeDeployer(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDeploymentFee(uint256,address,address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setPublicDeploymentStatus(bool)": FunctionFragment;
    "transferFactoryOwnership(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAgent", values: [string]): string;
  encodeFunctionData(functionFragment: "addDeployer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "applyFeeDiscount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAddDeployer",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchApplyFeeDiscount",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDeployTREXSuite",
    values: [
      {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      }[],
      {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRemoveDeployer",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTREXSuite",
    values: [
      {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enableDeploymentFee",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeploymentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicDeploymentStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAgent", values: [string]): string;
  encodeFunctionData(functionFragment: "isDeployer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isDeploymentFeeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeAgent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeDeployer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDeploymentFee",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPublicDeploymentStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFactoryOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFeeDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAddDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchApplyFeeDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDeployTREXSuite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRemoveDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTREXSuite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDeploymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeploymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPublicDeploymentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDeployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeploymentFeeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeploymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicDeploymentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFactoryOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AgentAdded(address)": EventFragment;
    "AgentRemoved(address)": EventFragment;
    "DeployerAdded(address)": EventFragment;
    "DeployerRemoved(address)": EventFragment;
    "DeploymentFeeEnabled(bool)": EventFragment;
    "DeploymentFeeSet(uint256,address,address)": EventFragment;
    "FactorySet(address)": EventFragment;
    "FeeDiscountApplied(address,uint16)": EventFragment;
    "GatewaySuiteDeploymentProcessed(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PublicDeploymentStatusSet(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploymentFeeEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploymentFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactorySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDiscountApplied"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GatewaySuiteDeploymentProcessed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicDeploymentStatusSet"): EventFragment;
}

export class TREXGateway extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TREXGatewayInterface;

  functions: {
    addAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDeployer(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addDeployer(address)"(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyFeeDiscount(
      deployer: string,
      discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "applyFeeDiscount(address,uint16)"(
      deployer: string,
      discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchAddDeployer(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchAddDeployer(address[])"(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchApplyFeeDiscount(
      deployers: string[],
      discounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchApplyFeeDiscount(address[],uint16[])"(
      deployers: string[],
      discounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchDeployTREXSuite(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      }[],
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchDeployTREXSuite(tuple[],tuple[])"(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      }[],
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRemoveDeployer(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchRemoveDeployer(address[])"(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateFee(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateFee(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployTREXSuite(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deployTREXSuite((address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableDeploymentFee(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enableDeploymentFee(bool)"(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDeploymentFee(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          fee: BigNumber;
          feeToken: string;
          feeCollector: string;
        }
      ]
    >;

    "getDeploymentFee()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          fee: BigNumber;
          feeToken: string;
          feeCollector: string;
        }
      ]
    >;

    getFactory(overrides?: CallOverrides): Promise<[string]>;

    "getFactory()"(overrides?: CallOverrides): Promise<[string]>;

    getPublicDeploymentStatus(overrides?: CallOverrides): Promise<[boolean]>;

    "getPublicDeploymentStatus()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAgent(_agent: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDeployer(deployer: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isDeployer(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDeploymentFeeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "isDeploymentFeeEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDeployer(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeDeployer(address)"(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeploymentFee(
      _fee: BigNumberish,
      _feeToken: string,
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDeploymentFee(uint256,address,address)"(
      _fee: BigNumberish,
      _feeToken: string,
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFactory(address)"(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicDeploymentStatus(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPublicDeploymentStatus(bool)"(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFactoryOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFactoryOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAgent(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAgent(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDeployer(
    deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addDeployer(address)"(
    deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyFeeDiscount(
    deployer: string,
    discount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "applyFeeDiscount(address,uint16)"(
    deployer: string,
    discount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchAddDeployer(
    deployers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchAddDeployer(address[])"(
    deployers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchApplyFeeDiscount(
    deployers: string[],
    discounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchApplyFeeDiscount(address[],uint16[])"(
    deployers: string[],
    discounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchDeployTREXSuite(
    _tokenDetails: {
      owner: string;
      name: string;
      symbol: string;
      decimals: BigNumberish;
      irs: string;
      ONCHAINID: string;
      irAgents: string[];
      tokenAgents: string[];
      complianceModules: string[];
      complianceSettings: BytesLike[];
      tokenOwner: string;
      dividend: string;
    }[],
    _claimDetails: {
      claimTopics: BigNumberish[];
      issuers: string[];
      issuerClaims: BigNumberish[][];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchDeployTREXSuite(tuple[],tuple[])"(
    _tokenDetails: {
      owner: string;
      name: string;
      symbol: string;
      decimals: BigNumberish;
      irs: string;
      ONCHAINID: string;
      irAgents: string[];
      tokenAgents: string[];
      complianceModules: string[];
      complianceSettings: BytesLike[];
      tokenOwner: string;
      dividend: string;
    }[],
    _claimDetails: {
      claimTopics: BigNumberish[];
      issuers: string[];
      issuerClaims: BigNumberish[][];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRemoveDeployer(
    deployers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchRemoveDeployer(address[])"(
    deployers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateFee(deployer: string, overrides?: CallOverrides): Promise<BigNumber>;

  "calculateFee(address)"(
    deployer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployTREXSuite(
    _tokenDetails: {
      owner: string;
      name: string;
      symbol: string;
      decimals: BigNumberish;
      irs: string;
      ONCHAINID: string;
      irAgents: string[];
      tokenAgents: string[];
      complianceModules: string[];
      complianceSettings: BytesLike[];
      tokenOwner: string;
      dividend: string;
    },
    _claimDetails: {
      claimTopics: BigNumberish[];
      issuers: string[];
      issuerClaims: BigNumberish[][];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deployTREXSuite((address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
    _tokenDetails: {
      owner: string;
      name: string;
      symbol: string;
      decimals: BigNumberish;
      irs: string;
      ONCHAINID: string;
      irAgents: string[];
      tokenAgents: string[];
      complianceModules: string[];
      complianceSettings: BytesLike[];
      tokenOwner: string;
      dividend: string;
    },
    _claimDetails: {
      claimTopics: BigNumberish[];
      issuers: string[];
      issuerClaims: BigNumberish[][];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableDeploymentFee(
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enableDeploymentFee(bool)"(
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDeploymentFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      fee: BigNumber;
      feeToken: string;
      feeCollector: string;
    }
  >;

  "getDeploymentFee()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      fee: BigNumber;
      feeToken: string;
      feeCollector: string;
    }
  >;

  getFactory(overrides?: CallOverrides): Promise<string>;

  "getFactory()"(overrides?: CallOverrides): Promise<string>;

  getPublicDeploymentStatus(overrides?: CallOverrides): Promise<boolean>;

  "getPublicDeploymentStatus()"(overrides?: CallOverrides): Promise<boolean>;

  isAgent(_agent: string, overrides?: CallOverrides): Promise<boolean>;

  "isAgent(address)"(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDeployer(deployer: string, overrides?: CallOverrides): Promise<boolean>;

  "isDeployer(address)"(
    deployer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDeploymentFeeEnabled(overrides?: CallOverrides): Promise<boolean>;

  "isDeploymentFeeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeAgent(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeAgent(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDeployer(
    deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeDeployer(address)"(
    deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeploymentFee(
    _fee: BigNumberish,
    _feeToken: string,
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDeploymentFee(uint256,address,address)"(
    _fee: BigNumberish,
    _feeToken: string,
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFactory(address)"(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicDeploymentStatus(
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPublicDeploymentStatus(bool)"(
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFactoryOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFactoryOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAgent(_agent: string, overrides?: CallOverrides): Promise<void>;

    "addAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDeployer(deployer: string, overrides?: CallOverrides): Promise<void>;

    "addDeployer(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    applyFeeDiscount(
      deployer: string,
      discount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "applyFeeDiscount(address,uint16)"(
      deployer: string,
      discount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchAddDeployer(
      deployers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchAddDeployer(address[])"(
      deployers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchApplyFeeDiscount(
      deployers: string[],
      discounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchApplyFeeDiscount(address[],uint16[])"(
      deployers: string[],
      discounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchDeployTREXSuite(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      }[],
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchDeployTREXSuite(tuple[],tuple[])"(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      }[],
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchRemoveDeployer(
      deployers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchRemoveDeployer(address[])"(
      deployers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculateFee(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateFee(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployTREXSuite(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "deployTREXSuite((address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    enableDeploymentFee(
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "enableDeploymentFee(bool)"(
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeploymentFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        fee: BigNumber;
        feeToken: string;
        feeCollector: string;
      }
    >;

    "getDeploymentFee()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        fee: BigNumber;
        feeToken: string;
        feeCollector: string;
      }
    >;

    getFactory(overrides?: CallOverrides): Promise<string>;

    "getFactory()"(overrides?: CallOverrides): Promise<string>;

    getPublicDeploymentStatus(overrides?: CallOverrides): Promise<boolean>;

    "getPublicDeploymentStatus()"(overrides?: CallOverrides): Promise<boolean>;

    isAgent(_agent: string, overrides?: CallOverrides): Promise<boolean>;

    "isAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDeployer(deployer: string, overrides?: CallOverrides): Promise<boolean>;

    "isDeployer(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDeploymentFeeEnabled(overrides?: CallOverrides): Promise<boolean>;

    "isDeploymentFeeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeAgent(_agent: string, overrides?: CallOverrides): Promise<void>;

    "removeAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDeployer(deployer: string, overrides?: CallOverrides): Promise<void>;

    "removeDeployer(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDeploymentFee(
      _fee: BigNumberish,
      _feeToken: string,
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDeploymentFee(uint256,address,address)"(
      _fee: BigNumberish,
      _feeToken: string,
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(factory: string, overrides?: CallOverrides): Promise<void>;

    "setFactory(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicDeploymentStatus(
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPublicDeploymentStatus(bool)"(
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFactoryOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFactoryOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AgentAdded(
      _agent: string | null
    ): TypedEventFilter<[string], { _agent: string }>;

    AgentRemoved(
      _agent: string | null
    ): TypedEventFilter<[string], { _agent: string }>;

    DeployerAdded(
      deployer: string | null
    ): TypedEventFilter<[string], { deployer: string }>;

    DeployerRemoved(
      deployer: string | null
    ): TypedEventFilter<[string], { deployer: string }>;

    DeploymentFeeEnabled(
      isEnabled: boolean | null
    ): TypedEventFilter<[boolean], { isEnabled: boolean }>;

    DeploymentFeeSet(
      fee: BigNumberish | null,
      feeToken: string | null,
      feeCollector: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { fee: BigNumber; feeToken: string; feeCollector: string }
    >;

    FactorySet(
      factory: string | null
    ): TypedEventFilter<[string], { factory: string }>;

    FeeDiscountApplied(
      deployer: string | null,
      discount: null
    ): TypedEventFilter<
      [string, number],
      { deployer: string; discount: number }
    >;

    GatewaySuiteDeploymentProcessed(
      requester: string | null,
      intendedOwner: null,
      feeApplied: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { requester: string; intendedOwner: string; feeApplied: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PublicDeploymentStatusSet(
      publicDeploymentStatus: boolean | null
    ): TypedEventFilter<[boolean], { publicDeploymentStatus: boolean }>;
  };

  estimateGas: {
    addAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDeployer(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addDeployer(address)"(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyFeeDiscount(
      deployer: string,
      discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "applyFeeDiscount(address,uint16)"(
      deployer: string,
      discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchAddDeployer(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchAddDeployer(address[])"(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchApplyFeeDiscount(
      deployers: string[],
      discounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchApplyFeeDiscount(address[],uint16[])"(
      deployers: string[],
      discounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchDeployTREXSuite(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      }[],
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchDeployTREXSuite(tuple[],tuple[])"(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      }[],
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRemoveDeployer(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchRemoveDeployer(address[])"(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateFee(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateFee(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployTREXSuite(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deployTREXSuite((address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableDeploymentFee(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enableDeploymentFee(bool)"(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDeploymentFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeploymentFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "getFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicDeploymentStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "getPublicDeploymentStatus()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAgent(_agent: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDeployer(deployer: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isDeployer(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDeploymentFeeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "isDeploymentFeeEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDeployer(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeDeployer(address)"(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeploymentFee(
      _fee: BigNumberish,
      _feeToken: string,
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDeploymentFee(uint256,address,address)"(
      _fee: BigNumberish,
      _feeToken: string,
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFactory(address)"(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicDeploymentStatus(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPublicDeploymentStatus(bool)"(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFactoryOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFactoryOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDeployer(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addDeployer(address)"(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyFeeDiscount(
      deployer: string,
      discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "applyFeeDiscount(address,uint16)"(
      deployer: string,
      discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchAddDeployer(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchAddDeployer(address[])"(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchApplyFeeDiscount(
      deployers: string[],
      discounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchApplyFeeDiscount(address[],uint16[])"(
      deployers: string[],
      discounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchDeployTREXSuite(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      }[],
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchDeployTREXSuite(tuple[],tuple[])"(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      }[],
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRemoveDeployer(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchRemoveDeployer(address[])"(
      deployers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateFee(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateFee(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployTREXSuite(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deployTREXSuite((address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableDeploymentFee(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enableDeploymentFee(bool)"(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDeploymentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDeploymentFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublicDeploymentStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPublicDeploymentStatus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeployer(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDeployer(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeploymentFeeEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDeploymentFeeEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDeployer(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeDeployer(address)"(
      deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeploymentFee(
      _fee: BigNumberish,
      _feeToken: string,
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDeploymentFee(uint256,address,address)"(
      _fee: BigNumberish,
      _feeToken: string,
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFactory(address)"(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicDeploymentStatus(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPublicDeploymentStatus(bool)"(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFactoryOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFactoryOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
