/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AgentManagerInterface extends ethers.utils.Interface {
  functions: {
    "addAgentAdmin(address)": FunctionFragment;
    "addComplianceAgent(address)": FunctionFragment;
    "addFreezer(address)": FunctionFragment;
    "addRecoveryAgent(address)": FunctionFragment;
    "addSupplyModifier(address)": FunctionFragment;
    "addTransferManager(address)": FunctionFragment;
    "addWhiteListManager(address)": FunctionFragment;
    "callBatchBurn(address[],uint256[],address)": FunctionFragment;
    "callBatchForcedTransfer(address[],address[],uint256[],address)": FunctionFragment;
    "callBatchFreezePartialTokens(address[],uint256[],address)": FunctionFragment;
    "callBatchMint(address[],uint256[],address)": FunctionFragment;
    "callBatchSetAddressFrozen(address[],bool[],address)": FunctionFragment;
    "callBatchUnfreezePartialTokens(address[],uint256[],address)": FunctionFragment;
    "callBurn(address,uint256,address)": FunctionFragment;
    "callDeleteIdentity(address,address)": FunctionFragment;
    "callForcedTransfer(address,address,uint256,address)": FunctionFragment;
    "callFreezePartialTokens(address,uint256,address)": FunctionFragment;
    "callMint(address,uint256,address)": FunctionFragment;
    "callPause(address)": FunctionFragment;
    "callRecoveryAddress(address,address,address,address)": FunctionFragment;
    "callRegisterIdentity(address,address,uint16,address)": FunctionFragment;
    "callSetAddressFrozen(address,bool,address)": FunctionFragment;
    "callUnfreezePartialTokens(address,uint256,address)": FunctionFragment;
    "callUnpause(address)": FunctionFragment;
    "callUpdateCountry(address,uint16,address)": FunctionFragment;
    "callUpdateIdentity(address,address,address)": FunctionFragment;
    "isAgentAdmin(address)": FunctionFragment;
    "isComplianceAgent(address)": FunctionFragment;
    "isFreezer(address)": FunctionFragment;
    "isRecoveryAgent(address)": FunctionFragment;
    "isSupplyModifier(address)": FunctionFragment;
    "isTransferManager(address)": FunctionFragment;
    "isWhiteListManager(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAgentAdmin(address)": FunctionFragment;
    "removeComplianceAgent(address)": FunctionFragment;
    "removeFreezer(address)": FunctionFragment;
    "removeRecoveryAgent(address)": FunctionFragment;
    "removeSupplyModifier(address)": FunctionFragment;
    "removeTransferManager(address)": FunctionFragment;
    "removeWhiteListManager(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAgentAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addComplianceAgent",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addFreezer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addRecoveryAgent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupplyModifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTransferManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhiteListManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "callBatchBurn",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "callBatchForcedTransfer",
    values: [string[], string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "callBatchFreezePartialTokens",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "callBatchMint",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "callBatchSetAddressFrozen",
    values: [string[], boolean[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "callBatchUnfreezePartialTokens",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "callBurn",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callDeleteIdentity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callForcedTransfer",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callFreezePartialTokens",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callMint",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "callPause", values: [string]): string;
  encodeFunctionData(
    functionFragment: "callRecoveryAddress",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callRegisterIdentity",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callSetAddressFrozen",
    values: [string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callUnfreezePartialTokens",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "callUnpause", values: [string]): string;
  encodeFunctionData(
    functionFragment: "callUpdateCountry",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callUpdateIdentity",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgentAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isComplianceAgent",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isFreezer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isRecoveryAgent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupplyModifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhiteListManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAgentAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeComplianceAgent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFreezer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRecoveryAgent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupplyModifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTransferManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhiteListManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAgentAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addComplianceAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFreezer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRecoveryAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupplyModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTransferManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhiteListManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callBatchBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callBatchForcedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callBatchFreezePartialTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callBatchMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callBatchSetAddressFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callBatchUnfreezePartialTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callDeleteIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callForcedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callFreezePartialTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callRecoveryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callRegisterIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callSetAddressFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callUnfreezePartialTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callUpdateCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callUpdateIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAgentAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComplianceAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFreezer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRecoveryAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupplyModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhiteListManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAgentAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeComplianceAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFreezer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRecoveryAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupplyModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTransferManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhiteListManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdded(address,string)": EventFragment;
    "RoleRemoved(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRemoved"): EventFragment;
}

export class AgentManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AgentManagerInterface;

  functions: {
    addAgentAdmin(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAgentAdmin(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addComplianceAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addComplianceAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFreezer(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addFreezer(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRecoveryAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addRecoveryAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupplyModifier(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addSupplyModifier(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTransferManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addTransferManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhiteListManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addWhiteListManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callBatchBurn(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callBatchBurn(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callBatchForcedTransfer(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callBatchForcedTransfer(address[],address[],uint256[],address)"(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callBatchFreezePartialTokens(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callBatchFreezePartialTokens(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callBatchMint(
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callBatchMint(address[],uint256[],address)"(
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callBatchSetAddressFrozen(
      _userAddresses: string[],
      _freeze: boolean[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callBatchSetAddressFrozen(address[],bool[],address)"(
      _userAddresses: string[],
      _freeze: boolean[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callBatchUnfreezePartialTokens(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callBatchUnfreezePartialTokens(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callBurn(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callBurn(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callDeleteIdentity(
      _userAddress: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callDeleteIdentity(address,address)"(
      _userAddress: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callForcedTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callForcedTransfer(address,address,uint256,address)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callFreezePartialTokens(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callFreezePartialTokens(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callMint(
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callMint(address,uint256,address)"(
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callPause(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callPause(address)"(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callRecoveryAddress(
      _lostWallet: string,
      _newWallet: string,
      _onchainID: string,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callRecoveryAddress(address,address,address,address)"(
      _lostWallet: string,
      _newWallet: string,
      _onchainID: string,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callRegisterIdentity(
      _userAddress: string,
      _onchainID: string,
      _country: BigNumberish,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callRegisterIdentity(address,address,uint16,address)"(
      _userAddress: string,
      _onchainID: string,
      _country: BigNumberish,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callSetAddressFrozen(
      _userAddress: string,
      _freeze: boolean,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callSetAddressFrozen(address,bool,address)"(
      _userAddress: string,
      _freeze: boolean,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callUnfreezePartialTokens(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callUnfreezePartialTokens(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callUnpause(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callUnpause(address)"(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callUpdateCountry(
      _userAddress: string,
      _country: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callUpdateCountry(address,uint16,address)"(
      _userAddress: string,
      _country: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callUpdateIdentity(
      _userAddress: string,
      _identity: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callUpdateIdentity(address,address,address)"(
      _userAddress: string,
      _identity: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAgentAdmin(_agent: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isAgentAdmin(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isComplianceAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isComplianceAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFreezer(_agent: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isFreezer(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRecoveryAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRecoveryAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupplyModifier(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSupplyModifier(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTransferManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTransferManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhiteListManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWhiteListManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeAgentAdmin(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeAgentAdmin(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeComplianceAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeComplianceAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFreezer(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeFreezer(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRecoveryAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeRecoveryAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupplyModifier(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeSupplyModifier(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTransferManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeTransferManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWhiteListManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeWhiteListManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAgentAdmin(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAgentAdmin(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addComplianceAgent(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addComplianceAgent(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFreezer(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addFreezer(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRecoveryAgent(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addRecoveryAgent(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupplyModifier(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addSupplyModifier(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTransferManager(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addTransferManager(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhiteListManager(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addWhiteListManager(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callBatchBurn(
    _userAddresses: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callBatchBurn(address[],uint256[],address)"(
    _userAddresses: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callBatchForcedTransfer(
    _fromList: string[],
    _toList: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callBatchForcedTransfer(address[],address[],uint256[],address)"(
    _fromList: string[],
    _toList: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callBatchFreezePartialTokens(
    _userAddresses: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callBatchFreezePartialTokens(address[],uint256[],address)"(
    _userAddresses: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callBatchMint(
    _toList: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callBatchMint(address[],uint256[],address)"(
    _toList: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callBatchSetAddressFrozen(
    _userAddresses: string[],
    _freeze: boolean[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callBatchSetAddressFrozen(address[],bool[],address)"(
    _userAddresses: string[],
    _freeze: boolean[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callBatchUnfreezePartialTokens(
    _userAddresses: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callBatchUnfreezePartialTokens(address[],uint256[],address)"(
    _userAddresses: string[],
    _amounts: BigNumberish[],
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callBurn(
    _userAddress: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callBurn(address,uint256,address)"(
    _userAddress: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callDeleteIdentity(
    _userAddress: string,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callDeleteIdentity(address,address)"(
    _userAddress: string,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callForcedTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callForcedTransfer(address,address,uint256,address)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callFreezePartialTokens(
    _userAddress: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callFreezePartialTokens(address,uint256,address)"(
    _userAddress: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callMint(
    _to: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callMint(address,uint256,address)"(
    _to: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callPause(
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callPause(address)"(
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callRecoveryAddress(
    _lostWallet: string,
    _newWallet: string,
    _onchainID: string,
    _managerOnchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callRecoveryAddress(address,address,address,address)"(
    _lostWallet: string,
    _newWallet: string,
    _onchainID: string,
    _managerOnchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callRegisterIdentity(
    _userAddress: string,
    _onchainID: string,
    _country: BigNumberish,
    _managerOnchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callRegisterIdentity(address,address,uint16,address)"(
    _userAddress: string,
    _onchainID: string,
    _country: BigNumberish,
    _managerOnchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callSetAddressFrozen(
    _userAddress: string,
    _freeze: boolean,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callSetAddressFrozen(address,bool,address)"(
    _userAddress: string,
    _freeze: boolean,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callUnfreezePartialTokens(
    _userAddress: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callUnfreezePartialTokens(address,uint256,address)"(
    _userAddress: string,
    _amount: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callUnpause(
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callUnpause(address)"(
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callUpdateCountry(
    _userAddress: string,
    _country: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callUpdateCountry(address,uint16,address)"(
    _userAddress: string,
    _country: BigNumberish,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callUpdateIdentity(
    _userAddress: string,
    _identity: string,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callUpdateIdentity(address,address,address)"(
    _userAddress: string,
    _identity: string,
    _onchainID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAgentAdmin(_agent: string, overrides?: CallOverrides): Promise<boolean>;

  "isAgentAdmin(address)"(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isComplianceAgent(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isComplianceAgent(address)"(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFreezer(_agent: string, overrides?: CallOverrides): Promise<boolean>;

  "isFreezer(address)"(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRecoveryAgent(_agent: string, overrides?: CallOverrides): Promise<boolean>;

  "isRecoveryAgent(address)"(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupplyModifier(_agent: string, overrides?: CallOverrides): Promise<boolean>;

  "isSupplyModifier(address)"(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTransferManager(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTransferManager(address)"(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhiteListManager(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhiteListManager(address)"(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeAgentAdmin(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeAgentAdmin(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeComplianceAgent(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeComplianceAgent(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFreezer(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeFreezer(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRecoveryAgent(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeRecoveryAgent(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupplyModifier(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeSupplyModifier(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTransferManager(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeTransferManager(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWhiteListManager(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeWhiteListManager(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAgentAdmin(_agent: string, overrides?: CallOverrides): Promise<void>;

    "addAgentAdmin(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addComplianceAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addComplianceAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addFreezer(_agent: string, overrides?: CallOverrides): Promise<void>;

    "addFreezer(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRecoveryAgent(_agent: string, overrides?: CallOverrides): Promise<void>;

    "addRecoveryAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupplyModifier(_agent: string, overrides?: CallOverrides): Promise<void>;

    "addSupplyModifier(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTransferManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTransferManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhiteListManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addWhiteListManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callBatchBurn(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callBatchBurn(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callBatchForcedTransfer(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callBatchForcedTransfer(address[],address[],uint256[],address)"(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callBatchFreezePartialTokens(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callBatchFreezePartialTokens(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callBatchMint(
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callBatchMint(address[],uint256[],address)"(
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callBatchSetAddressFrozen(
      _userAddresses: string[],
      _freeze: boolean[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callBatchSetAddressFrozen(address[],bool[],address)"(
      _userAddresses: string[],
      _freeze: boolean[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callBatchUnfreezePartialTokens(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callBatchUnfreezePartialTokens(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callBurn(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callBurn(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callDeleteIdentity(
      _userAddress: string,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callDeleteIdentity(address,address)"(
      _userAddress: string,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callForcedTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callForcedTransfer(address,address,uint256,address)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callFreezePartialTokens(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callFreezePartialTokens(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callMint(
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callMint(address,uint256,address)"(
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callPause(_onchainID: string, overrides?: CallOverrides): Promise<void>;

    "callPause(address)"(
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callRecoveryAddress(
      _lostWallet: string,
      _newWallet: string,
      _onchainID: string,
      _managerOnchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callRecoveryAddress(address,address,address,address)"(
      _lostWallet: string,
      _newWallet: string,
      _onchainID: string,
      _managerOnchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callRegisterIdentity(
      _userAddress: string,
      _onchainID: string,
      _country: BigNumberish,
      _managerOnchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callRegisterIdentity(address,address,uint16,address)"(
      _userAddress: string,
      _onchainID: string,
      _country: BigNumberish,
      _managerOnchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callSetAddressFrozen(
      _userAddress: string,
      _freeze: boolean,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callSetAddressFrozen(address,bool,address)"(
      _userAddress: string,
      _freeze: boolean,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callUnfreezePartialTokens(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callUnfreezePartialTokens(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callUnpause(_onchainID: string, overrides?: CallOverrides): Promise<void>;

    "callUnpause(address)"(
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callUpdateCountry(
      _userAddress: string,
      _country: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callUpdateCountry(address,uint16,address)"(
      _userAddress: string,
      _country: BigNumberish,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callUpdateIdentity(
      _userAddress: string,
      _identity: string,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callUpdateIdentity(address,address,address)"(
      _userAddress: string,
      _identity: string,
      _onchainID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAgentAdmin(_agent: string, overrides?: CallOverrides): Promise<boolean>;

    "isAgentAdmin(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isComplianceAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isComplianceAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFreezer(_agent: string, overrides?: CallOverrides): Promise<boolean>;

    "isFreezer(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRecoveryAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRecoveryAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupplyModifier(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSupplyModifier(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTransferManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTransferManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhiteListManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhiteListManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeAgentAdmin(_agent: string, overrides?: CallOverrides): Promise<void>;

    "removeAgentAdmin(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeComplianceAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeComplianceAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFreezer(_agent: string, overrides?: CallOverrides): Promise<void>;

    "removeFreezer(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRecoveryAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeRecoveryAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupplyModifier(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeSupplyModifier(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTransferManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTransferManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhiteListManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeWhiteListManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RoleAdded(
      _agent: string | null,
      _role: null
    ): TypedEventFilter<[string, string], { _agent: string; _role: string }>;

    RoleRemoved(
      _agent: string | null,
      _role: null
    ): TypedEventFilter<[string, string], { _agent: string; _role: string }>;
  };

  estimateGas: {
    addAgentAdmin(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAgentAdmin(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addComplianceAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addComplianceAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFreezer(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addFreezer(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRecoveryAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addRecoveryAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupplyModifier(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addSupplyModifier(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTransferManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addTransferManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhiteListManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addWhiteListManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callBatchBurn(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callBatchBurn(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callBatchForcedTransfer(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callBatchForcedTransfer(address[],address[],uint256[],address)"(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callBatchFreezePartialTokens(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callBatchFreezePartialTokens(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callBatchMint(
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callBatchMint(address[],uint256[],address)"(
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callBatchSetAddressFrozen(
      _userAddresses: string[],
      _freeze: boolean[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callBatchSetAddressFrozen(address[],bool[],address)"(
      _userAddresses: string[],
      _freeze: boolean[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callBatchUnfreezePartialTokens(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callBatchUnfreezePartialTokens(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callBurn(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callBurn(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callDeleteIdentity(
      _userAddress: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callDeleteIdentity(address,address)"(
      _userAddress: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callForcedTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callForcedTransfer(address,address,uint256,address)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callFreezePartialTokens(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callFreezePartialTokens(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callMint(
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callMint(address,uint256,address)"(
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callPause(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callPause(address)"(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callRecoveryAddress(
      _lostWallet: string,
      _newWallet: string,
      _onchainID: string,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callRecoveryAddress(address,address,address,address)"(
      _lostWallet: string,
      _newWallet: string,
      _onchainID: string,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callRegisterIdentity(
      _userAddress: string,
      _onchainID: string,
      _country: BigNumberish,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callRegisterIdentity(address,address,uint16,address)"(
      _userAddress: string,
      _onchainID: string,
      _country: BigNumberish,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callSetAddressFrozen(
      _userAddress: string,
      _freeze: boolean,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callSetAddressFrozen(address,bool,address)"(
      _userAddress: string,
      _freeze: boolean,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callUnfreezePartialTokens(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callUnfreezePartialTokens(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callUnpause(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callUnpause(address)"(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callUpdateCountry(
      _userAddress: string,
      _country: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callUpdateCountry(address,uint16,address)"(
      _userAddress: string,
      _country: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callUpdateIdentity(
      _userAddress: string,
      _identity: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callUpdateIdentity(address,address,address)"(
      _userAddress: string,
      _identity: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAgentAdmin(_agent: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAgentAdmin(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isComplianceAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isComplianceAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFreezer(_agent: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isFreezer(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRecoveryAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRecoveryAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupplyModifier(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSupplyModifier(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransferManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTransferManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhiteListManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhiteListManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAgentAdmin(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeAgentAdmin(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeComplianceAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeComplianceAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFreezer(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeFreezer(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRecoveryAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeRecoveryAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupplyModifier(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeSupplyModifier(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTransferManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeTransferManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWhiteListManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeWhiteListManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAgentAdmin(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAgentAdmin(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addComplianceAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addComplianceAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFreezer(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addFreezer(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRecoveryAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addRecoveryAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupplyModifier(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addSupplyModifier(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTransferManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addTransferManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhiteListManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addWhiteListManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callBatchBurn(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callBatchBurn(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callBatchForcedTransfer(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callBatchForcedTransfer(address[],address[],uint256[],address)"(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callBatchFreezePartialTokens(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callBatchFreezePartialTokens(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callBatchMint(
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callBatchMint(address[],uint256[],address)"(
      _toList: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callBatchSetAddressFrozen(
      _userAddresses: string[],
      _freeze: boolean[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callBatchSetAddressFrozen(address[],bool[],address)"(
      _userAddresses: string[],
      _freeze: boolean[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callBatchUnfreezePartialTokens(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callBatchUnfreezePartialTokens(address[],uint256[],address)"(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callBurn(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callBurn(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callDeleteIdentity(
      _userAddress: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callDeleteIdentity(address,address)"(
      _userAddress: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callForcedTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callForcedTransfer(address,address,uint256,address)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callFreezePartialTokens(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callFreezePartialTokens(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callMint(
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callMint(address,uint256,address)"(
      _to: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callPause(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callPause(address)"(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callRecoveryAddress(
      _lostWallet: string,
      _newWallet: string,
      _onchainID: string,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callRecoveryAddress(address,address,address,address)"(
      _lostWallet: string,
      _newWallet: string,
      _onchainID: string,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callRegisterIdentity(
      _userAddress: string,
      _onchainID: string,
      _country: BigNumberish,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callRegisterIdentity(address,address,uint16,address)"(
      _userAddress: string,
      _onchainID: string,
      _country: BigNumberish,
      _managerOnchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callSetAddressFrozen(
      _userAddress: string,
      _freeze: boolean,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callSetAddressFrozen(address,bool,address)"(
      _userAddress: string,
      _freeze: boolean,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callUnfreezePartialTokens(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callUnfreezePartialTokens(address,uint256,address)"(
      _userAddress: string,
      _amount: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callUnpause(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callUnpause(address)"(
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callUpdateCountry(
      _userAddress: string,
      _country: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callUpdateCountry(address,uint16,address)"(
      _userAddress: string,
      _country: BigNumberish,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callUpdateIdentity(
      _userAddress: string,
      _identity: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callUpdateIdentity(address,address,address)"(
      _userAddress: string,
      _identity: string,
      _onchainID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAgentAdmin(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAgentAdmin(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isComplianceAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isComplianceAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFreezer(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFreezer(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRecoveryAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRecoveryAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupplyModifier(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSupplyModifier(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTransferManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhiteListManager(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhiteListManager(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAgentAdmin(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeAgentAdmin(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeComplianceAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeComplianceAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFreezer(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeFreezer(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRecoveryAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeRecoveryAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupplyModifier(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeSupplyModifier(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTransferManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeTransferManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWhiteListManager(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeWhiteListManager(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
