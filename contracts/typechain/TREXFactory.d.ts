/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TREXFactoryInterface extends ethers.utils.Interface {
  functions: {
    "_idFactory()": FunctionFragment;
    "deployTREXSuite(string,tuple,tuple)": FunctionFragment;
    "getImplementationAuthority()": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverContractOwnership(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setImplementationAuthority(address)": FunctionFragment;
    "tokenDeployed(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_idFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployTREXSuite",
    values: [
      string,
      {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementationAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverContractOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementationAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDeployed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "_idFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployTREXSuite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementationAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverContractOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementationAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(address)": EventFragment;
    "ImplementationAuthoritySet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TREXSuiteDeployed(address,address,address,address,address,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImplementationAuthoritySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TREXSuiteDeployed"): EventFragment;
}

export class TREXFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TREXFactoryInterface;

  functions: {
    _idFactory(overrides?: CallOverrides): Promise<[string]>;

    "_idFactory()"(overrides?: CallOverrides): Promise<[string]>;

    deployTREXSuite(
      _salt: string,
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deployTREXSuite(string,(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      _salt: string,
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getImplementationAuthority(overrides?: CallOverrides): Promise<[string]>;

    "getImplementationAuthority()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recoverContractOwnership(
      _contract: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recoverContractOwnership(address,address)"(
      _contract: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplementationAuthority(
      implementationAuthority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setImplementationAuthority(address)"(
      implementationAuthority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenDeployed(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "tokenDeployed(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _idFactory(overrides?: CallOverrides): Promise<string>;

  "_idFactory()"(overrides?: CallOverrides): Promise<string>;

  deployTREXSuite(
    _salt: string,
    _tokenDetails: {
      owner: string;
      name: string;
      symbol: string;
      decimals: BigNumberish;
      irs: string;
      ONCHAINID: string;
      irAgents: string[];
      tokenAgents: string[];
      complianceModules: string[];
      complianceSettings: BytesLike[];
      tokenOwner: string;
      dividend: string;
    },
    _claimDetails: {
      claimTopics: BigNumberish[];
      issuers: string[];
      issuerClaims: BigNumberish[][];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deployTREXSuite(string,(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
    _salt: string,
    _tokenDetails: {
      owner: string;
      name: string;
      symbol: string;
      decimals: BigNumberish;
      irs: string;
      ONCHAINID: string;
      irAgents: string[];
      tokenAgents: string[];
      complianceModules: string[];
      complianceSettings: BytesLike[];
      tokenOwner: string;
      dividend: string;
    },
    _claimDetails: {
      claimTopics: BigNumberish[];
      issuers: string[];
      issuerClaims: BigNumberish[][];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getImplementationAuthority(overrides?: CallOverrides): Promise<string>;

  "getImplementationAuthority()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  recoverContractOwnership(
    _contract: string,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recoverContractOwnership(address,address)"(
    _contract: string,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplementationAuthority(
    implementationAuthority_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setImplementationAuthority(address)"(
    implementationAuthority_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenDeployed(arg0: string, overrides?: CallOverrides): Promise<string>;

  "tokenDeployed(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _idFactory(overrides?: CallOverrides): Promise<string>;

    "_idFactory()"(overrides?: CallOverrides): Promise<string>;

    deployTREXSuite(
      _salt: string,
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string, string], string]>;

    "deployTREXSuite(string,(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      _salt: string,
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string, string], string]>;

    getImplementationAuthority(overrides?: CallOverrides): Promise<string>;

    "getImplementationAuthority()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    recoverContractOwnership(
      _contract: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverContractOwnership(address,address)"(
      _contract: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setImplementationAuthority(
      implementationAuthority_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setImplementationAuthority(address)"(
      implementationAuthority_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenDeployed(arg0: string, overrides?: CallOverrides): Promise<string>;

    "tokenDeployed(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deployed(
      _addr: string | null
    ): TypedEventFilter<[string], { _addr: string }>;

    ImplementationAuthoritySet(
      _implementationAuthority: null
    ): TypedEventFilter<[string], { _implementationAuthority: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TREXSuiteDeployed(
      _token: string | null,
      _ir: null,
      _irs: null,
      _tir: null,
      _ctr: null,
      _mc: null,
      _salt: string | null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string],
      {
        _token: string;
        _ir: string;
        _irs: string;
        _tir: string;
        _ctr: string;
        _mc: string;
        _salt: string;
      }
    >;
  };

  estimateGas: {
    _idFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "_idFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployTREXSuite(
      _salt: string,
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deployTREXSuite(string,(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      _salt: string,
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getImplementationAuthority(overrides?: CallOverrides): Promise<BigNumber>;

    "getImplementationAuthority()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoverContractOwnership(
      _contract: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recoverContractOwnership(address,address)"(
      _contract: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplementationAuthority(
      implementationAuthority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setImplementationAuthority(address)"(
      implementationAuthority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenDeployed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenDeployed(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _idFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_idFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployTREXSuite(
      _salt: string,
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deployTREXSuite(string,(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      _salt: string,
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getImplementationAuthority(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getImplementationAuthority()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverContractOwnership(
      _contract: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recoverContractOwnership(address,address)"(
      _contract: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplementationAuthority(
      implementationAuthority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setImplementationAuthority(address)"(
      implementationAuthority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenDeployed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenDeployed(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
