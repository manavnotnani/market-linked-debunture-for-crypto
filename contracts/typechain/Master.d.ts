/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MasterInterface extends ethers.utils.Interface {
  functions: {
    "CRM()": FunctionFragment;
    "DVDND()": FunctionFragment;
    "IdentityImpAuth()": FunctionFragment;
    "MBM()": FunctionFragment;
    "NFTIdCounter()": FunctionFragment;
    "SLM()": FunctionFragment;
    "TTL()": FunctionFragment;
    "USDC()": FunctionFragment;
    "addAgent(address)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "buyShare(uint256,uint256,uint8,string,uint256)": FunctionFragment;
    "callfunctions(uint16[],uint256,tuple)": FunctionFragment;
    "claimDividend(uint256)": FunctionFragment;
    "deployIdentityBind(address[],uint256[],string[],uint16[],string[],string[])": FunctionFragment;
    "deployProject(uint256[],uint16[],string[],address,tuple,tuple,tuple)": FunctionFragment;
    "depositDividendRewards(uint256,uint256)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "idFactory()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address,address,address,address,string)": FunctionFragment;
    "isAgent(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lengthLimit()": FunctionFragment;
    "managemntFee()": FunctionFragment;
    "mintAccess(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "projects()": FunctionFragment;
    "propertyData1(uint256)": FunctionFragment;
    "propertyData2(uint256)": FunctionFragment;
    "propertyNFTId(uint256)": FunctionFragment;
    "rejectBuyUpdate(address,uint256,uint256,uint256)": FunctionFragment;
    "removeAgent(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setManagementFee(uint8)": FunctionFragment;
    "setTrexFact(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenToPrjId(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trexFac()": FunctionFragment;
    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "usdc()": FunctionFragment;
    "userBalancePerBuyId(address,uint256,uint256)": FunctionFragment;
    "userBalnc(address,uint256,uint256)": FunctionFragment;
    "userBuyCounter(address,uint256)": FunctionFragment;
    "userPrjctTknsBalance(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CRM", values?: undefined): string;
  encodeFunctionData(functionFragment: "DVDND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "IdentityImpAuth",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MBM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NFTIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SLM", values?: undefined): string;
  encodeFunctionData(functionFragment: "TTL", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "addAgent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyShare",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callfunctions",
    values: [
      BigNumberish[],
      BigNumberish,
      { limitTime: BigNumberish; limitValue: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDividend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployIdentityBind",
    values: [
      string[],
      BigNumberish[],
      string[],
      BigNumberish[],
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployProject",
    values: [
      BigNumberish[],
      BigNumberish[],
      string[],
      string,
      { limitTime: BigNumberish; limitValue: BigNumberish },
      {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDividendRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "idFactory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "isAgent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lengthLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managemntFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAccess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propertyData1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyData2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyNFTId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectBuyUpdate",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeAgent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTrexFact", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToPrjId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "trexFac", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMintModule",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBalancePerBuyId",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalnc",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBuyCounter",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPrjctTknsBalance",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CRM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DVDND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IdentityImpAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MBM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NFTIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SLM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TTL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callfunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployIdentityBind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositDividendRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lengthLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managemntFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintAccess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertyData1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertyData2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertyNFTId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectBuyUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrexFact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToPrjId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trexFac", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMintModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBalancePerBuyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBalnc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBuyCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPrjctTknsBalance",
    data: BytesLike
  ): Result;

  events: {
    "AgentAdded(address)": EventFragment;
    "AgentRemoved(address)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "buy(address,uint256,address,address,uint256,uint256,uint256,uint256,uint256,string,uint256)": EventFragment;
    "deployed(tuple,tuple,uint256)": EventFragment;
    "diviendClaim(address,uint256,uint256,address)": EventFragment;
    "diviendDeposit(uint256,uint256)": EventFragment;
    "identities(address,address,uint256,address,address,string,string)": EventFragment;
    "reject(address,uint256,address,address,uint256)": EventFragment;
    "tokenMint(address,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "diviendClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "diviendDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "identities"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "reject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tokenMint"): EventFragment;
}

export class Master extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MasterInterface;

  functions: {
    CRM(overrides?: CallOverrides): Promise<[string]>;

    "CRM()"(overrides?: CallOverrides): Promise<[string]>;

    DVDND(overrides?: CallOverrides): Promise<[string]>;

    "DVDND()"(overrides?: CallOverrides): Promise<[string]>;

    IdentityImpAuth(overrides?: CallOverrides): Promise<[string]>;

    "IdentityImpAuth()"(overrides?: CallOverrides): Promise<[string]>;

    MBM(overrides?: CallOverrides): Promise<[string]>;

    "MBM()"(overrides?: CallOverrides): Promise<[string]>;

    NFTIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    "NFTIdCounter()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SLM(overrides?: CallOverrides): Promise<[string]>;

    "SLM()"(overrides?: CallOverrides): Promise<[string]>;

    TTL(overrides?: CallOverrides): Promise<[string]>;

    "TTL()"(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    "USDC()"(overrides?: CallOverrides): Promise<[string]>;

    addAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    buyShare(
      _USDCAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _prjctId: BigNumberish,
      _buyType: string,
      _countryCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyShare(uint256,uint256,uint8,string,uint256)"(
      _USDCAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _prjctId: BigNumberish,
      _buyType: string,
      _countryCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callfunctions(
      _restrictCountries: BigNumberish[],
      _maxhold: BigNumberish,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[string, string, string]]>;

    "callfunctions(uint16[],uint256,(uint32,uint256))"(
      _restrictCountries: BigNumberish[],
      _maxhold: BigNumberish,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[string, string, string]]>;

    claimDividend(
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimDividend(uint256)"(
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployIdentityBind(
      _user: string[],
      _prjctId: BigNumberish[],
      _salt: string[],
      _country: BigNumberish[],
      _subscriberId: string[],
      _uid: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deployIdentityBind(address[],uint256[],string[],uint16[],string[],string[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _salt: string[],
      _country: BigNumberish[],
      _subscriberId: string[],
      _uid: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployProject(
      values: BigNumberish[],
      _countries: BigNumberish[],
      _saltnPId: string[],
      _agent: string,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deployProject(uint256[],uint16[],string[],address,(uint32,uint256),(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      values: BigNumberish[],
      _countries: BigNumberish[],
      _saltnPId: string[],
      _agent: string,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositDividendRewards(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositDividendRewards(uint256,uint256)"(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    idFactory(overrides?: CallOverrides): Promise<[string]>;

    "idFactory()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _IdenImpAuth: string,
      _owner: string,
      _agent: string,
      _USDC: string,
      _idFactory: string,
      _supplyLimitModule: string,
      _countryRestrictModule: string,
      _maxBalanceModule: string,
      _timeTransferLimit: string,
      _dividend: string,
      _master2: string,
      newuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,address,address,address,address,address,string)"(
      _IdenImpAuth: string,
      _owner: string,
      _agent: string,
      _USDC: string,
      _idFactory: string,
      _supplyLimitModule: string,
      _countryRestrictModule: string,
      _maxBalanceModule: string,
      _timeTransferLimit: string,
      _dividend: string,
      _master2: string,
      newuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAgent(_agent: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lengthLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lengthLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    managemntFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "managemntFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "mintAccess(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    projects(overrides?: CallOverrides): Promise<[BigNumber]>;

    "projects()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    propertyData1(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string, string, string, string] & {
          token: string;
          ir: string;
          irs: string;
          tir: string;
          ctr: string;
          mc: string;
          prjctOwner: string;
          dividend: string;
        }
      ]
    >;

    "propertyData1(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string, string, string, string] & {
          token: string;
          ir: string;
          irs: string;
          tir: string;
          ctr: string;
          mc: string;
          prjctOwner: string;
          dividend: string;
        }
      ]
    >;

    propertyData2(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number[],
          string[],
          string
        ] & {
          minimumBuy: BigNumber;
          managementFee: BigNumber;
          price: BigNumber;
          totalSupply: BigNumber;
          bought: BigNumber;
          locked: BigNumber;
          country: BigNumber;
          maxhold: BigNumber;
          restrictCountries: number[];
          agent: string[];
          propertyId: string;
        }
      ]
    >;

    "propertyData2(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number[],
          string[],
          string
        ] & {
          minimumBuy: BigNumber;
          managementFee: BigNumber;
          price: BigNumber;
          totalSupply: BigNumber;
          bought: BigNumber;
          locked: BigNumber;
          country: BigNumber;
          maxhold: BigNumber;
          restrictCountries: number[];
          agent: string[];
          propertyId: string;
        }
      ]
    >;

    propertyNFTId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "propertyNFTId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rejectBuyUpdate(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rejectBuyUpdate(address,uint256,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManagementFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setManagementFee(uint8)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrexFact(
      _fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTrexFact(address)"(
      _fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenToPrjId(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenToPrjId(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trexFac(overrides?: CallOverrides): Promise<[string]>;

    "trexFac()"(overrides?: CallOverrides): Promise<[string]>;

    updateMintModule(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    "usdc()"(overrides?: CallOverrides): Promise<[string]>;

    userBalancePerBuyId(
      _user: string,
      _projectid: BigNumberish,
      _buyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, boolean] & {
          usdc: BigNumber;
          token: BigNumber;
          minted: boolean;
        }
      ]
    >;

    "userBalancePerBuyId(address,uint256,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      _buyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, boolean] & {
          usdc: BigNumber;
          token: BigNumber;
          minted: boolean;
        }
      ]
    >;

    userBalnc(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, boolean] & {
          usdc: BigNumber;
          token: BigNumber;
          minted: boolean;
        }
      ]
    >;

    "userBalnc(address,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, boolean] & {
          usdc: BigNumber;
          token: BigNumber;
          minted: boolean;
        }
      ]
    >;

    userBuyCounter(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userBuyCounter(address,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userPrjctTknsBalance(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, boolean] & {
          usdc: BigNumber;
          token: BigNumber;
          minted: boolean;
        }
      ]
    >;

    "userPrjctTknsBalance(address,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, boolean] & {
          usdc: BigNumber;
          token: BigNumber;
          minted: boolean;
        }
      ]
    >;
  };

  CRM(overrides?: CallOverrides): Promise<string>;

  "CRM()"(overrides?: CallOverrides): Promise<string>;

  DVDND(overrides?: CallOverrides): Promise<string>;

  "DVDND()"(overrides?: CallOverrides): Promise<string>;

  IdentityImpAuth(overrides?: CallOverrides): Promise<string>;

  "IdentityImpAuth()"(overrides?: CallOverrides): Promise<string>;

  MBM(overrides?: CallOverrides): Promise<string>;

  "MBM()"(overrides?: CallOverrides): Promise<string>;

  NFTIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "NFTIdCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  SLM(overrides?: CallOverrides): Promise<string>;

  "SLM()"(overrides?: CallOverrides): Promise<string>;

  TTL(overrides?: CallOverrides): Promise<string>;

  "TTL()"(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  "USDC()"(overrides?: CallOverrides): Promise<string>;

  addAgent(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAgent(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  buyShare(
    _USDCAmount: BigNumberish,
    _tokenAmount: BigNumberish,
    _prjctId: BigNumberish,
    _buyType: string,
    _countryCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyShare(uint256,uint256,uint8,string,uint256)"(
    _USDCAmount: BigNumberish,
    _tokenAmount: BigNumberish,
    _prjctId: BigNumberish,
    _buyType: string,
    _countryCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callfunctions(
    _restrictCountries: BigNumberish[],
    _maxhold: BigNumberish,
    _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  "callfunctions(uint16[],uint256,(uint32,uint256))"(
    _restrictCountries: BigNumberish[],
    _maxhold: BigNumberish,
    _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  claimDividend(
    _prjctId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimDividend(uint256)"(
    _prjctId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployIdentityBind(
    _user: string[],
    _prjctId: BigNumberish[],
    _salt: string[],
    _country: BigNumberish[],
    _subscriberId: string[],
    _uid: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deployIdentityBind(address[],uint256[],string[],uint16[],string[],string[])"(
    _user: string[],
    _prjctId: BigNumberish[],
    _salt: string[],
    _country: BigNumberish[],
    _subscriberId: string[],
    _uid: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployProject(
    values: BigNumberish[],
    _countries: BigNumberish[],
    _saltnPId: string[],
    _agent: string,
    _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
    _tokenDetails: {
      owner: string;
      name: string;
      symbol: string;
      decimals: BigNumberish;
      irs: string;
      ONCHAINID: string;
      irAgents: string[];
      tokenAgents: string[];
      complianceModules: string[];
      complianceSettings: BytesLike[];
      tokenOwner: string;
      dividend: string;
    },
    _claimDetails: {
      claimTopics: BigNumberish[];
      issuers: string[];
      issuerClaims: BigNumberish[][];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deployProject(uint256[],uint16[],string[],address,(uint32,uint256),(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
    values: BigNumberish[],
    _countries: BigNumberish[],
    _saltnPId: string[],
    _agent: string,
    _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
    _tokenDetails: {
      owner: string;
      name: string;
      symbol: string;
      decimals: BigNumberish;
      irs: string;
      ONCHAINID: string;
      irAgents: string[];
      tokenAgents: string[];
      complianceModules: string[];
      complianceSettings: BytesLike[];
      tokenOwner: string;
      dividend: string;
    },
    _claimDetails: {
      claimTopics: BigNumberish[];
      issuers: string[];
      issuerClaims: BigNumberish[][];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositDividendRewards(
    _amount: BigNumberish,
    _prjctId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositDividendRewards(uint256,uint256)"(
    _amount: BigNumberish,
    _prjctId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  idFactory(overrides?: CallOverrides): Promise<string>;

  "idFactory()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _IdenImpAuth: string,
    _owner: string,
    _agent: string,
    _USDC: string,
    _idFactory: string,
    _supplyLimitModule: string,
    _countryRestrictModule: string,
    _maxBalanceModule: string,
    _timeTransferLimit: string,
    _dividend: string,
    _master2: string,
    newuri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,address,address,address,address,address,string)"(
    _IdenImpAuth: string,
    _owner: string,
    _agent: string,
    _USDC: string,
    _idFactory: string,
    _supplyLimitModule: string,
    _countryRestrictModule: string,
    _maxBalanceModule: string,
    _timeTransferLimit: string,
    _dividend: string,
    _master2: string,
    newuri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAgent(_agent: string, overrides?: CallOverrides): Promise<boolean>;

  "isAgent(address)"(
    _agent: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lengthLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "lengthLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  managemntFee(overrides?: CallOverrides): Promise<BigNumber>;

  "managemntFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintAccess(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "mintAccess(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  projects(overrides?: CallOverrides): Promise<BigNumber>;

  "projects()"(overrides?: CallOverrides): Promise<BigNumber>;

  propertyData1(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string] & {
      token: string;
      ir: string;
      irs: string;
      tir: string;
      ctr: string;
      mc: string;
      prjctOwner: string;
      dividend: string;
    }
  >;

  "propertyData1(uint256)"(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string] & {
      token: string;
      ir: string;
      irs: string;
      tir: string;
      ctr: string;
      mc: string;
      prjctOwner: string;
      dividend: string;
    }
  >;

  propertyData2(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number[],
      string[],
      string
    ] & {
      minimumBuy: BigNumber;
      managementFee: BigNumber;
      price: BigNumber;
      totalSupply: BigNumber;
      bought: BigNumber;
      locked: BigNumber;
      country: BigNumber;
      maxhold: BigNumber;
      restrictCountries: number[];
      agent: string[];
      propertyId: string;
    }
  >;

  "propertyData2(uint256)"(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number[],
      string[],
      string
    ] & {
      minimumBuy: BigNumber;
      managementFee: BigNumber;
      price: BigNumber;
      totalSupply: BigNumber;
      bought: BigNumber;
      locked: BigNumber;
      country: BigNumber;
      maxhold: BigNumber;
      restrictCountries: number[];
      agent: string[];
      propertyId: string;
    }
  >;

  propertyNFTId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "propertyNFTId(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rejectBuyUpdate(
    user: string,
    projectId: BigNumberish,
    buyId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rejectBuyUpdate(address,uint256,uint256,uint256)"(
    user: string,
    projectId: BigNumberish,
    buyId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAgent(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeAgent(address)"(
    _agent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManagementFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setManagementFee(uint8)"(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrexFact(
    _fact: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTrexFact(address)"(
    _fact: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenToPrjId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "tokenToPrjId(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trexFac(overrides?: CallOverrides): Promise<string>;

  "trexFac()"(overrides?: CallOverrides): Promise<string>;

  updateMintModule(
    _user: string,
    _tokenAmount: BigNumberish,
    _projectId: BigNumberish,
    _buyId: BigNumberish,
    _AdminfeeAmount: BigNumberish,
    _issuerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
    _user: string,
    _tokenAmount: BigNumberish,
    _projectId: BigNumberish,
    _buyId: BigNumberish,
    _AdminfeeAmount: BigNumberish,
    _issuerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  usdc(overrides?: CallOverrides): Promise<string>;

  "usdc()"(overrides?: CallOverrides): Promise<string>;

  userBalancePerBuyId(
    _user: string,
    _projectid: BigNumberish,
    _buyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      usdc: BigNumber;
      token: BigNumber;
      minted: boolean;
    }
  >;

  "userBalancePerBuyId(address,uint256,uint256)"(
    _user: string,
    _projectid: BigNumberish,
    _buyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      usdc: BigNumber;
      token: BigNumber;
      minted: boolean;
    }
  >;

  userBalnc(
    user: string,
    projectId: BigNumberish,
    buyID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      usdc: BigNumber;
      token: BigNumber;
      minted: boolean;
    }
  >;

  "userBalnc(address,uint256,uint256)"(
    user: string,
    projectId: BigNumberish,
    buyID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      usdc: BigNumber;
      token: BigNumber;
      minted: boolean;
    }
  >;

  userBuyCounter(
    _user: string,
    _projectid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBuyCounter(address,uint256)"(
    _user: string,
    _projectid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userPrjctTknsBalance(
    _user: string,
    _projectid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      usdc: BigNumber;
      token: BigNumber;
      minted: boolean;
    }
  >;

  "userPrjctTknsBalance(address,uint256)"(
    _user: string,
    _projectid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      usdc: BigNumber;
      token: BigNumber;
      minted: boolean;
    }
  >;

  callStatic: {
    CRM(overrides?: CallOverrides): Promise<string>;

    "CRM()"(overrides?: CallOverrides): Promise<string>;

    DVDND(overrides?: CallOverrides): Promise<string>;

    "DVDND()"(overrides?: CallOverrides): Promise<string>;

    IdentityImpAuth(overrides?: CallOverrides): Promise<string>;

    "IdentityImpAuth()"(overrides?: CallOverrides): Promise<string>;

    MBM(overrides?: CallOverrides): Promise<string>;

    "MBM()"(overrides?: CallOverrides): Promise<string>;

    NFTIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "NFTIdCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    SLM(overrides?: CallOverrides): Promise<string>;

    "SLM()"(overrides?: CallOverrides): Promise<string>;

    TTL(overrides?: CallOverrides): Promise<string>;

    "TTL()"(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    "USDC()"(overrides?: CallOverrides): Promise<string>;

    addAgent(_agent: string, overrides?: CallOverrides): Promise<void>;

    "addAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    buyShare(
      _USDCAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _prjctId: BigNumberish,
      _buyType: string,
      _countryCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyShare(uint256,uint256,uint8,string,uint256)"(
      _USDCAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _prjctId: BigNumberish,
      _buyType: string,
      _countryCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    callfunctions(
      _restrictCountries: BigNumberish[],
      _maxhold: BigNumberish,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    "callfunctions(uint16[],uint256,(uint32,uint256))"(
      _restrictCountries: BigNumberish[],
      _maxhold: BigNumberish,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    claimDividend(
      _prjctId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimDividend(uint256)"(
      _prjctId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployIdentityBind(
      _user: string[],
      _prjctId: BigNumberish[],
      _salt: string[],
      _country: BigNumberish[],
      _subscriberId: string[],
      _uid: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "deployIdentityBind(address[],uint256[],string[],uint16[],string[],string[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _salt: string[],
      _country: BigNumberish[],
      _subscriberId: string[],
      _uid: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    deployProject(
      values: BigNumberish[],
      _countries: BigNumberish[],
      _saltnPId: string[],
      _agent: string,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "deployProject(uint256[],uint16[],string[],address,(uint32,uint256),(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      values: BigNumberish[],
      _countries: BigNumberish[],
      _saltnPId: string[],
      _agent: string,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    depositDividendRewards(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositDividendRewards(uint256,uint256)"(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    idFactory(overrides?: CallOverrides): Promise<string>;

    "idFactory()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _IdenImpAuth: string,
      _owner: string,
      _agent: string,
      _USDC: string,
      _idFactory: string,
      _supplyLimitModule: string,
      _countryRestrictModule: string,
      _maxBalanceModule: string,
      _timeTransferLimit: string,
      _dividend: string,
      _master2: string,
      newuri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address,address,address,address,address,address,string)"(
      _IdenImpAuth: string,
      _owner: string,
      _agent: string,
      _USDC: string,
      _idFactory: string,
      _supplyLimitModule: string,
      _countryRestrictModule: string,
      _maxBalanceModule: string,
      _timeTransferLimit: string,
      _dividend: string,
      _master2: string,
      newuri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAgent(_agent: string, overrides?: CallOverrides): Promise<boolean>;

    "isAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lengthLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "lengthLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    managemntFee(overrides?: CallOverrides): Promise<BigNumber>;

    "managemntFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mintAccess(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    projects(overrides?: CallOverrides): Promise<BigNumber>;

    "projects()"(overrides?: CallOverrides): Promise<BigNumber>;

    propertyData1(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        token: string;
        ir: string;
        irs: string;
        tir: string;
        ctr: string;
        mc: string;
        prjctOwner: string;
        dividend: string;
      }
    >;

    "propertyData1(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string] & {
        token: string;
        ir: string;
        irs: string;
        tir: string;
        ctr: string;
        mc: string;
        prjctOwner: string;
        dividend: string;
      }
    >;

    propertyData2(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number[],
        string[],
        string
      ] & {
        minimumBuy: BigNumber;
        managementFee: BigNumber;
        price: BigNumber;
        totalSupply: BigNumber;
        bought: BigNumber;
        locked: BigNumber;
        country: BigNumber;
        maxhold: BigNumber;
        restrictCountries: number[];
        agent: string[];
        propertyId: string;
      }
    >;

    "propertyData2(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number[],
        string[],
        string
      ] & {
        minimumBuy: BigNumber;
        managementFee: BigNumber;
        price: BigNumber;
        totalSupply: BigNumber;
        bought: BigNumber;
        locked: BigNumber;
        country: BigNumber;
        maxhold: BigNumber;
        restrictCountries: number[];
        agent: string[];
        propertyId: string;
      }
    >;

    propertyNFTId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propertyNFTId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectBuyUpdate(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rejectBuyUpdate(address,uint256,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAgent(_agent: string, overrides?: CallOverrides): Promise<void>;

    "removeAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagementFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setManagementFee(uint8)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrexFact(_fact: string, overrides?: CallOverrides): Promise<void>;

    "setTrexFact(address)"(
      _fact: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenToPrjId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenToPrjId(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trexFac(overrides?: CallOverrides): Promise<string>;

    "trexFac()"(overrides?: CallOverrides): Promise<string>;

    updateMintModule(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    usdc(overrides?: CallOverrides): Promise<string>;

    "usdc()"(overrides?: CallOverrides): Promise<string>;

    userBalancePerBuyId(
      _user: string,
      _projectid: BigNumberish,
      _buyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        usdc: BigNumber;
        token: BigNumber;
        minted: boolean;
      }
    >;

    "userBalancePerBuyId(address,uint256,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      _buyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        usdc: BigNumber;
        token: BigNumber;
        minted: boolean;
      }
    >;

    userBalnc(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        usdc: BigNumber;
        token: BigNumber;
        minted: boolean;
      }
    >;

    "userBalnc(address,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        usdc: BigNumber;
        token: BigNumber;
        minted: boolean;
      }
    >;

    userBuyCounter(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBuyCounter(address,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPrjctTknsBalance(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        usdc: BigNumber;
        token: BigNumber;
        minted: boolean;
      }
    >;

    "userPrjctTknsBalance(address,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        usdc: BigNumber;
        token: BigNumber;
        minted: boolean;
      }
    >;
  };

  filters: {
    AgentAdded(
      _agent: string | null
    ): TypedEventFilter<[string], { _agent: string }>;

    AgentRemoved(
      _agent: string | null
    ): TypedEventFilter<[string], { _agent: string }>;

    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    URI(
      value: null,
      id: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    buy(
      user: null,
      usdcAmount: null,
      token: null,
      agent: null,
      projectId: null,
      buyCounter: null,
      receiveAmount: null,
      fee: null,
      price: null,
      buyType: null,
      country: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        user: string;
        usdcAmount: BigNumber;
        token: string;
        agent: string;
        projectId: BigNumber;
        buyCounter: BigNumber;
        receiveAmount: BigNumber;
        fee: BigNumber;
        price: BigNumber;
        buyType: string;
        country: BigNumber;
      }
    >;

    deployed(
      propertyData1: null,
      propertyData2: null,
      projectId: null
    ): TypedEventFilter<
      [
        [string, string, string, string, string, string, string, string] & {
          token: string;
          ir: string;
          irs: string;
          tir: string;
          ctr: string;
          mc: string;
          prjctOwner: string;
          dividend: string;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number[],
          string[],
          string
        ] & {
          minimumBuy: BigNumber;
          managementFee: BigNumber;
          price: BigNumber;
          totalSupply: BigNumber;
          bought: BigNumber;
          locked: BigNumber;
          country: BigNumber;
          maxhold: BigNumber;
          restrictCountries: number[];
          agent: string[];
          propertyId: string;
        },
        BigNumber
      ],
      {
        propertyData1: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ] & {
          token: string;
          ir: string;
          irs: string;
          tir: string;
          ctr: string;
          mc: string;
          prjctOwner: string;
          dividend: string;
        };
        propertyData2: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number[],
          string[],
          string
        ] & {
          minimumBuy: BigNumber;
          managementFee: BigNumber;
          price: BigNumber;
          totalSupply: BigNumber;
          bought: BigNumber;
          locked: BigNumber;
          country: BigNumber;
          maxhold: BigNumber;
          restrictCountries: number[];
          agent: string[];
          propertyId: string;
        };
        projectId: BigNumber;
      }
    >;

    diviendClaim(
      user: null,
      amount: null,
      ProjectId: null,
      token: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { user: string; amount: BigNumber; ProjectId: BigNumber; token: string }
    >;

    diviendDeposit(
      amount: null,
      ProjectId: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; ProjectId: BigNumber }
    >;

    identities(
      identity: null,
      user: null,
      projectId: null,
      agent: null,
      token: null,
      subscriberId: null,
      uid: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, string, string],
      {
        identity: string;
        user: string;
        projectId: BigNumber;
        agent: string;
        token: string;
        subscriberId: string;
        uid: string;
      }
    >;

    reject(
      user: null,
      amount: null,
      token: null,
      agent: null,
      buyCounter: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        amount: BigNumber;
        token: string;
        agent: string;
        buyCounter: BigNumber;
      }
    >;

    tokenMint(
      user: null,
      mintAmount: null,
      token: null,
      agent: null,
      buyCounter: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        user: string;
        mintAmount: BigNumber;
        token: string;
        agent: string;
        buyCounter: BigNumber;
      }
    >;
  };

  estimateGas: {
    CRM(overrides?: CallOverrides): Promise<BigNumber>;

    "CRM()"(overrides?: CallOverrides): Promise<BigNumber>;

    DVDND(overrides?: CallOverrides): Promise<BigNumber>;

    "DVDND()"(overrides?: CallOverrides): Promise<BigNumber>;

    IdentityImpAuth(overrides?: CallOverrides): Promise<BigNumber>;

    "IdentityImpAuth()"(overrides?: CallOverrides): Promise<BigNumber>;

    MBM(overrides?: CallOverrides): Promise<BigNumber>;

    "MBM()"(overrides?: CallOverrides): Promise<BigNumber>;

    NFTIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "NFTIdCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    SLM(overrides?: CallOverrides): Promise<BigNumber>;

    "SLM()"(overrides?: CallOverrides): Promise<BigNumber>;

    TTL(overrides?: CallOverrides): Promise<BigNumber>;

    "TTL()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyShare(
      _USDCAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _prjctId: BigNumberish,
      _buyType: string,
      _countryCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyShare(uint256,uint256,uint8,string,uint256)"(
      _USDCAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _prjctId: BigNumberish,
      _buyType: string,
      _countryCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callfunctions(
      _restrictCountries: BigNumberish[],
      _maxhold: BigNumberish,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "callfunctions(uint16[],uint256,(uint32,uint256))"(
      _restrictCountries: BigNumberish[],
      _maxhold: BigNumberish,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimDividend(
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimDividend(uint256)"(
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployIdentityBind(
      _user: string[],
      _prjctId: BigNumberish[],
      _salt: string[],
      _country: BigNumberish[],
      _subscriberId: string[],
      _uid: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deployIdentityBind(address[],uint256[],string[],uint16[],string[],string[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _salt: string[],
      _country: BigNumberish[],
      _subscriberId: string[],
      _uid: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployProject(
      values: BigNumberish[],
      _countries: BigNumberish[],
      _saltnPId: string[],
      _agent: string,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deployProject(uint256[],uint16[],string[],address,(uint32,uint256),(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      values: BigNumberish[],
      _countries: BigNumberish[],
      _saltnPId: string[],
      _agent: string,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositDividendRewards(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositDividendRewards(uint256,uint256)"(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    idFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "idFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _IdenImpAuth: string,
      _owner: string,
      _agent: string,
      _USDC: string,
      _idFactory: string,
      _supplyLimitModule: string,
      _countryRestrictModule: string,
      _maxBalanceModule: string,
      _timeTransferLimit: string,
      _dividend: string,
      _master2: string,
      newuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,address,address,address,address,address,string)"(
      _IdenImpAuth: string,
      _owner: string,
      _agent: string,
      _USDC: string,
      _idFactory: string,
      _supplyLimitModule: string,
      _countryRestrictModule: string,
      _maxBalanceModule: string,
      _timeTransferLimit: string,
      _dividend: string,
      _master2: string,
      newuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAgent(_agent: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lengthLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "lengthLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    managemntFee(overrides?: CallOverrides): Promise<BigNumber>;

    "managemntFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintAccess(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    projects(overrides?: CallOverrides): Promise<BigNumber>;

    "projects()"(overrides?: CallOverrides): Promise<BigNumber>;

    propertyData1(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propertyData1(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propertyData2(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propertyData2(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propertyNFTId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propertyNFTId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectBuyUpdate(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rejectBuyUpdate(address,uint256,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManagementFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setManagementFee(uint8)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrexFact(
      _fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTrexFact(address)"(
      _fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToPrjId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenToPrjId(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trexFac(overrides?: CallOverrides): Promise<BigNumber>;

    "trexFac()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateMintModule(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    "usdc()"(overrides?: CallOverrides): Promise<BigNumber>;

    userBalancePerBuyId(
      _user: string,
      _projectid: BigNumberish,
      _buyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBalancePerBuyId(address,uint256,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      _buyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBalnc(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBalnc(address,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBuyCounter(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBuyCounter(address,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPrjctTknsBalance(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPrjctTknsBalance(address,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CRM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CRM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DVDND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DVDND()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IdentityImpAuth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "IdentityImpAuth()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MBM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MBM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NFTIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NFTIdCounter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SLM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SLM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TTL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TTL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "USDC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyShare(
      _USDCAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _prjctId: BigNumberish,
      _buyType: string,
      _countryCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyShare(uint256,uint256,uint8,string,uint256)"(
      _USDCAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _prjctId: BigNumberish,
      _buyType: string,
      _countryCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callfunctions(
      _restrictCountries: BigNumberish[],
      _maxhold: BigNumberish,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "callfunctions(uint16[],uint256,(uint32,uint256))"(
      _restrictCountries: BigNumberish[],
      _maxhold: BigNumberish,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimDividend(
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimDividend(uint256)"(
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployIdentityBind(
      _user: string[],
      _prjctId: BigNumberish[],
      _salt: string[],
      _country: BigNumberish[],
      _subscriberId: string[],
      _uid: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deployIdentityBind(address[],uint256[],string[],uint16[],string[],string[])"(
      _user: string[],
      _prjctId: BigNumberish[],
      _salt: string[],
      _country: BigNumberish[],
      _subscriberId: string[],
      _uid: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployProject(
      values: BigNumberish[],
      _countries: BigNumberish[],
      _saltnPId: string[],
      _agent: string,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deployProject(uint256[],uint16[],string[],address,(uint32,uint256),(address,string,string,uint8,address,address,address[],address[],address[],bytes[],address,address),(uint256[],address[],uint256[][]))"(
      values: BigNumberish[],
      _countries: BigNumberish[],
      _saltnPId: string[],
      _agent: string,
      _limit: { limitTime: BigNumberish; limitValue: BigNumberish },
      _tokenDetails: {
        owner: string;
        name: string;
        symbol: string;
        decimals: BigNumberish;
        irs: string;
        ONCHAINID: string;
        irAgents: string[];
        tokenAgents: string[];
        complianceModules: string[];
        complianceSettings: BytesLike[];
        tokenOwner: string;
        dividend: string;
      },
      _claimDetails: {
        claimTopics: BigNumberish[];
        issuers: string[];
        issuerClaims: BigNumberish[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositDividendRewards(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositDividendRewards(uint256,uint256)"(
      _amount: BigNumberish,
      _prjctId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "idFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _IdenImpAuth: string,
      _owner: string,
      _agent: string,
      _USDC: string,
      _idFactory: string,
      _supplyLimitModule: string,
      _countryRestrictModule: string,
      _maxBalanceModule: string,
      _timeTransferLimit: string,
      _dividend: string,
      _master2: string,
      newuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,address,address,address,address,address,string)"(
      _IdenImpAuth: string,
      _owner: string,
      _agent: string,
      _USDC: string,
      _idFactory: string,
      _supplyLimitModule: string,
      _countryRestrictModule: string,
      _maxBalanceModule: string,
      _timeTransferLimit: string,
      _dividend: string,
      _master2: string,
      newuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAgent(address)"(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lengthLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lengthLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managemntFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "managemntFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintAccess(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "projects()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propertyData1(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "propertyData1(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propertyData2(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "propertyData2(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propertyNFTId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "propertyNFTId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectBuyUpdate(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rejectBuyUpdate(address,uint256,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAgent(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeAgent(address)"(
      _agent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManagementFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setManagementFee(uint8)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrexFact(
      _fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTrexFact(address)"(
      _fact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToPrjId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenToPrjId(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trexFac(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trexFac()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMintModule(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateMintModule(address,uint256,uint256,uint256,uint256,uint256)"(
      _user: string,
      _tokenAmount: BigNumberish,
      _projectId: BigNumberish,
      _buyId: BigNumberish,
      _AdminfeeAmount: BigNumberish,
      _issuerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBalancePerBuyId(
      _user: string,
      _projectid: BigNumberish,
      _buyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBalancePerBuyId(address,uint256,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      _buyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBalnc(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBalnc(address,uint256,uint256)"(
      user: string,
      projectId: BigNumberish,
      buyID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBuyCounter(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBuyCounter(address,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPrjctTknsBalance(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPrjctTknsBalance(address,uint256)"(
      _user: string,
      _projectid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
